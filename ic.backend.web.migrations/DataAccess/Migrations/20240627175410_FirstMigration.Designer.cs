// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DdbbLiquittyContext))]
    [Migration("20240627175410_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.ApliAbogado", b =>
                {
                    b.Property<int>("IdAbogado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAbogado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAbogado"));

                    b.Property<string>("ApellidosAbogado")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("apellidosAbogado");

                    b.Property<int?>("EstadoAbogado")
                        .HasColumnType("int")
                        .HasColumnName("estadoAbogado");

                    b.Property<DateTime?>("FecFinLicenciaAbogado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecFinLicenciaAbogado");

                    b.Property<DateTime?>("FecInicioLicenciaAbogado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioLicenciaAbogado");

                    b.Property<DateTime?>("FecNacimientoAbogado")
                        .HasColumnType("date")
                        .HasColumnName("fecNacimientoAbogado");

                    b.Property<string>("NombresAbogado")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombresAbogado");

                    b.Property<string>("TarjetaProfesional")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("tarjetaProfesional");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdAbogado")
                        .HasName("PK__APLI_ABO__22D2E6DEABCB5A29");

                    b.HasIndex("UsuarioId");

                    b.ToTable("APLI_ABOGADOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliActuacionesExpediente", b =>
                {
                    b.Property<int>("IdActuacionExpediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idActuacionExpediente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdActuacionExpediente"));

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActuacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActuacion");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacion");

                    b.Property<DateTime?>("FecEstadoActuacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecEstadoActuacion");

                    b.Property<DateTime?>("FecGestionActuacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecGestionActuacion");

                    b.Property<string>("NombreActuacionExpediente")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("nombreActuacionExpediente");

                    b.Property<int?>("SubEtapaId")
                        .HasColumnType("int")
                        .HasColumnName("subEtapaId");

                    b.Property<string>("UrlDocAdjunto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("urlDocAdjunto");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdActuacionExpediente")
                        .HasName("PK__APLI_ACT__17FAAC5164A260C1");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("SubEtapaId");

                    b.ToTable("APLI_ACTUACIONES_EXPEDIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliAsignacione", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAsignacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsignacion"));

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActualizacionAsignacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionAsignacion");

                    b.Property<DateTime>("FecCreacionAsignacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionAsignacion");

                    b.Property<int>("TipoAsignacionId")
                        .HasColumnType("int")
                        .HasColumnName("tipoAsignacionId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdAsignacion")
                        .HasName("PK__APLI_ASI__E1714478F3230806");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("TipoAsignacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("APLI_ASIGNACIONES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliDemandado", b =>
                {
                    b.Property<int>("IdDemandado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDemandado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDemandado"));

                    b.Property<string>("ApellidoMaternoDemandado")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("apellidoMaternoDemandado");

                    b.Property<string>("ApellidoPaternoDemandado")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("apellidoPaternoDemandado");

                    b.Property<string>("DireccionDemandado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("direccionDemandado");

                    b.Property<string>("EmailDemandado")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("emailDemandado");

                    b.Property<string>("NombreDemandado")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreDemandado");

                    b.Property<string>("NumeroDocumentoDemandado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoDemandado");

                    b.Property<string>("TelefonoDemandado")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefonoDemandado");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdDemandado")
                        .HasName("PK__APLI_DEM__AFDB382450E1EEEA");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("APLI_DEMANDADOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliDemandante", b =>
                {
                    b.Property<int>("IdDemandante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDemandante");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDemandante"));

                    b.Property<string>("NombreDemandante")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreDemandante");

                    b.Property<string>("NumeroDocumentoDemandante")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoDemandante");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.Property<int>("TipoPersonaId")
                        .HasColumnType("int")
                        .HasColumnName("tipoPersonaId");

                    b.HasKey("IdDemandante")
                        .HasName("PK__APLI_DEM__46019B4F2E357C73");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("TipoPersonaId");

                    b.ToTable("APLI_DEMANDANTES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliDespacho", b =>
                {
                    b.Property<int>("IdDespacho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDespacho");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDespacho"));

                    b.Property<string>("NombreDespacho")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreDespacho");

                    b.HasKey("IdDespacho")
                        .HasName("PK__APLI_DES__61E931FA36D2DAA1");

                    b.ToTable("APLI_DESPACHOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliDetalleExpedienteEvento", b =>
                {
                    b.Property<int>("IdDetalleExpedienteEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDetalleExpedienteEvento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetalleExpedienteEvento"));

                    b.Property<string>("ArchivoAdjunto")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("archivoAdjunto");

                    b.Property<bool>("ControlWeb")
                        .HasColumnType("bit")
                        .HasColumnName("controlWeb");

                    b.Property<string>("DescripcionDetalleExpedienteEvento")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descripcionDetalleExpedienteEvento");

                    b.Property<int>("EstadoExpedienteEvento")
                        .HasColumnType("int")
                        .HasColumnName("estadoExpedienteEvento");

                    b.Property<int>("EventoId")
                        .HasColumnType("int")
                        .HasColumnName("eventoId");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActualizacionExpedienteEvento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionExpedienteEvento");

                    b.Property<DateTime?>("FecAsignadaFin")
                        .HasColumnType("date")
                        .HasColumnName("fecAsignadaFin");

                    b.Property<DateTime?>("FecAsignadaInicio")
                        .HasColumnType("date")
                        .HasColumnName("fecAsignadaInicio");

                    b.Property<DateTime>("FecCreacionExpedienteEvento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionExpedienteEvento");

                    b.Property<TimeSpan?>("HoraAsignadaFin")
                        .HasColumnType("time")
                        .HasColumnName("horaAsignadaFin");

                    b.Property<TimeSpan?>("HoraAsignadaInicio")
                        .HasColumnType("time")
                        .HasColumnName("horaAsignadaInicio");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("nombreUsuario");

                    b.Property<string>("Observacion")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("observacion");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdDetalleExpedienteEvento")
                        .HasName("PK__APLI_DET__B26634A37B07502D");

                    b.HasIndex("EventoId");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("APLI_DETALLE_EXPEDIENTE_EVENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliDirectorio", b =>
                {
                    b.Property<int>("IdDirectorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDirectorio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDirectorio"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<string>("EmailDirectorio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailDirectorio");

                    b.Property<int>("EstadoDirectorio")
                        .HasColumnType("int")
                        .HasColumnName("estadoDirectorio");

                    b.Property<DateTime>("FecActualizacionDirectorio")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionDirectorio");

                    b.Property<DateTime>("FecCreacionDirectorio")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionDirectorio");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("IdentificacionDirectorio")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("identificacionDirectorio");

                    b.Property<string>("TelefonoDirectorio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefonoDirectorio");

                    b.Property<string>("TipoDirectorio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoDirectorio");

                    b.Property<string>("WhatsAppDirectorio")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("whatsAppDirectorio");

                    b.HasKey("IdDirectorio")
                        .HasName("PK__APLI_DIR__14C666632E855429");

                    b.HasIndex("ClienteId");

                    b.ToTable("APLI_DIRECTORIOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliDivisa", b =>
                {
                    b.Property<int>("IdDivisa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDivisa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDivisa"));

                    b.Property<string>("AbreviacionDivisa")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("abreviacionDivisa");

                    b.Property<string>("NombreDivisa")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreDivisa");

                    b.Property<string>("SimboloDivisa")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("simboloDivisa");

                    b.HasKey("IdDivisa")
                        .HasName("PK__APLI_DIV__96114A561016D848");

                    b.ToTable("APLI_DIVISAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliEstadoCobro", b =>
                {
                    b.Property<int>("IdEstadoCobro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEstadoCobro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoCobro"));

                    b.Property<string>("NombreEstadoCobro")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreEstadoCobro");

                    b.HasKey("IdEstadoCobro")
                        .HasName("PK__APLI_EST__383D24944BAC210A");

                    b.ToTable("APLI_ESTADO_COBROS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliEstadoProcesal", b =>
                {
                    b.Property<int>("IdEstadoProcesal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEstadoProcesal");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoProcesal"));

                    b.Property<int>("EstadoEstadoProcesal")
                        .HasColumnType("int")
                        .HasColumnName("estadoEstadoProcesal");

                    b.Property<DateTime?>("FecActualizacionEstadoProcesal")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionEstadoProcesal");

                    b.Property<DateTime>("FecCreacionEstadoProcesal")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionEstadoProcesal");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreEstadoProcesal")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreEstadoProcesal");

                    b.Property<int>("NroOrdenEstado")
                        .HasColumnType("int")
                        .HasColumnName("nroOrdenEstado");

                    b.Property<int>("TipoEtapaId")
                        .HasColumnType("int")
                        .HasColumnName("tipoEtapaId");

                    b.HasKey("IdEstadoProcesal")
                        .HasName("PK__APLI_EST__785BE16ED1AF2E9C");

                    b.HasIndex("TipoEtapaId");

                    b.ToTable("APLI_ESTADO_PROCESAL", (string)null);
                });

            modelBuilder.Entity("Domain.ApliEstatusProceso", b =>
                {
                    b.Property<int>("IdEstatusProceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEstatusProceso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstatusProceso"));

                    b.Property<int>("EstadoEstatusProceso")
                        .HasColumnType("int")
                        .HasColumnName("estadoEstatusProceso");

                    b.Property<int>("EstadoProcesalId")
                        .HasColumnType("int")
                        .HasColumnName("estadoProcesalId");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActualizacionEstatusProceso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionEstatusProceso");

                    b.Property<DateTime>("FecCreacionEstatusProceso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionEstatusProceso");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdEstatusProceso")
                        .HasName("PK__APLI_EST__4A7993648C734F85");

                    b.HasIndex("EstadoProcesalId");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("APLI_ESTATUS_PROCESOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliEvento", b =>
                {
                    b.Property<int>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEvento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvento"));

                    b.Property<string>("CodigoEvento")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("codigoEvento")
                        .IsFixedLength();

                    b.Property<bool>("ControlWeb")
                        .HasColumnType("bit")
                        .HasColumnName("controlWeb");

                    b.Property<int>("EstadoEvento")
                        .HasColumnType("int")
                        .HasColumnName("estadoEvento");

                    b.Property<DateTime?>("FecActualizacionEvento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionEvento");

                    b.Property<DateTime>("FecCreacionEvento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionEvento");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreEvento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreEvento");

                    b.Property<int>("TipoEventoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoEventoId");

                    b.HasKey("IdEvento")
                        .HasName("PK__APLI_EVE__C8DC7BDA0EFC2C12");

                    b.HasIndex("TipoEventoId");

                    b.ToTable("APLI_EVENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliExpDocumento", b =>
                {
                    b.Property<int>("IdExpDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idExpDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpDocumento"));

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime>("FecCreacionExpDocumento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionExpDocumento");

                    b.Property<int>("TipoExpDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoExpDocumentoId");

                    b.Property<string>("UrlDocAdjunto")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("urlDocAdjunto");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdExpDocumento")
                        .HasName("PK__APLI_EXP__950B158F122AA2BC");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("TipoExpDocumentoId");

                    b.ToTable("APLI_EXP_DOCUMENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliExpedienteBitacora", b =>
                {
                    b.Property<string>("DescripcionBitacora")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descripcionBitacora");

                    b.Property<int?>("EstadoBitacora")
                        .HasColumnType("int")
                        .HasColumnName("estadoBitacora");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime>("FecRegistro")
                        .HasColumnType("date")
                        .HasColumnName("fecRegistro");

                    b.Property<DateTime?>("FecSeguimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecSeguimiento");

                    b.Property<TimeSpan>("HoraRegistro")
                        .HasColumnType("time")
                        .HasColumnName("horaRegistro");

                    b.Property<int>("IdBitacoraExpediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBitacoraExpediente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBitacoraExpediente"));

                    b.Property<int>("TipoBitacoraId")
                        .HasColumnType("int")
                        .HasColumnName("tipoBitacoraId");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("TipoBitacoraId");

                    b.ToTable("APLI_EXPEDIENTE_BITACORA", (string)null);
                });

            modelBuilder.Entity("Domain.ApliFecha", b =>
                {
                    b.Property<int>("IdFecha")
                        .HasColumnType("int")
                        .HasColumnName("idFecha");

                    b.Property<int?>("Annio")
                        .HasColumnType("int")
                        .HasColumnName("annio");

                    b.Property<int?>("Dia")
                        .HasColumnType("int")
                        .HasColumnName("dia");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.Property<int?>("Mes")
                        .HasColumnType("int")
                        .HasColumnName("mes");

                    b.HasKey("IdFecha")
                        .HasName("PK__APLI_FEC__65F2E8696C3D2123");

                    b.ToTable("APLI_FECHAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliJuzgado", b =>
                {
                    b.Property<int>("IdJuzgado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idJuzgado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJuzgado"));

                    b.Property<string>("CodigoJuzgado")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codigoJuzgado");

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("correoElectronico");

                    b.Property<int>("EstadoJuzgado")
                        .HasColumnType("int")
                        .HasColumnName("estadoJuzgado");

                    b.Property<DateTime?>("FecActualizacionJuzgado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionJuzgado");

                    b.Property<DateTime>("FecCreacionJuzgado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionJuzgado");

                    b.Property<int>("LocacionJuzgadoId")
                        .HasColumnType("int")
                        .HasColumnName("locacionJuzgadoId");

                    b.Property<string>("NombreJuzgado")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nombreJuzgado");

                    b.Property<int?>("NroJuzgado")
                        .HasColumnType("int")
                        .HasColumnName("nroJuzgado");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdJuzgado")
                        .HasName("PK__APLI_JUZ__95D0A920A2CF9067");

                    b.HasIndex("LocacionJuzgadoId");

                    b.ToTable("APLI_JUZGADOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliJuzgadoExpediente", b =>
                {
                    b.Property<int>("IdJuzgadoExpediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idJuzgadoExpediente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJuzgadoExpediente"));

                    b.Property<string>("AbogadoInicialJuzgadoExpediente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("abogadoInicialJuzgadoExpediente");

                    b.Property<string>("CiudadJuzgadoExpediente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ciudadJuzgadoExpediente");

                    b.Property<string>("DepartamentoJuzgadoExpediente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("departamentoJuzgadoExpediente");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActualizacionjuzgadoExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionjuzgadoExpediente");

                    b.Property<DateTime>("FecCreacionJuzgadoExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionJuzgadoExpediente");

                    b.Property<int>("JuzgadoId")
                        .HasColumnType("int")
                        .HasColumnName("juzgadoId");

                    b.Property<string>("JuzgadoOrigen")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("juzgadoOrigen");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdJuzgadoExpediente")
                        .HasName("PK__APLI_JUZ__AEE78C8B254C5627");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("JuzgadoId");

                    b.ToTable("APLI_JUZGADO_EXPEDIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliLocacionJuzgado", b =>
                {
                    b.Property<int>("IdLocacionJuzgado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLocacionJuzgado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocacionJuzgado"));

                    b.Property<string>("CiudadJuzgados")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ciudadJuzgados");

                    b.Property<string>("DepartamentoJuzgado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("departamentoJuzgado");

                    b.Property<int?>("SubtipoJuzgadoId")
                        .HasColumnType("int")
                        .HasColumnName("subtipoJuzgadoId");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<string>("ZonaJuzgado")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("zonaJuzgado");

                    b.HasKey("IdLocacionJuzgado")
                        .HasName("PK__APLI_LOC__45234F404BED56B6");

                    b.HasIndex("SubtipoJuzgadoId");

                    b.ToTable("APLI_LOCACION_JUZGADOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliLocacione", b =>
                {
                    b.Property<int>("IdLocacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLocacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocacion"));

                    b.Property<string>("CiudadLocacion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ciudadLocacion");

                    b.Property<double?>("LatitudLocacion")
                        .HasColumnType("float")
                        .HasColumnName("latitudLocacion");

                    b.Property<double?>("LongitudLocacion")
                        .HasColumnType("float")
                        .HasColumnName("longitudLocacion");

                    b.Property<string>("PaisLocacion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("paisLocacion");

                    b.Property<string>("Prefijo2Locacion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("prefijo2Locacion");

                    b.Property<string>("Prefijo3Locacion")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("prefijo3Locacion");

                    b.Property<string>("PrefijoNumericoLocacion")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("prefijoNumericoLocacion");

                    b.Property<string>("ProvinciaLocacion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("provinciaLocacion");

                    b.Property<string>("RegionLocacion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("regionLocacion");

                    b.Property<int>("SedeId")
                        .HasColumnType("int")
                        .HasColumnName("sedeId");

                    b.Property<string>("ZonaHorariaLocacion")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("zonaHorariaLocacion");

                    b.HasKey("IdLocacion")
                        .HasName("PK__APLI_LOC__C895F35ECA5E8F89");

                    b.HasIndex("SedeId");

                    b.ToTable("APLI_LOCACIONES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliMedidaCautelarExpediente", b =>
                {
                    b.Property<int>("IdMedidaCautelarExpediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMedidaCautelarExpediente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedidaCautelarExpediente"));

                    b.Property<DateTime?>("CalendarioMedidaCautelarExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("calendarioMedidaCautelarExpediente");

                    b.Property<int>("DemandadoId")
                        .HasColumnType("int")
                        .HasColumnName("demandadoId");

                    b.Property<string>("DetalleMedidaCautelar")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("detalleMedidaCautelar");

                    b.Property<int?>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime>("FecCreacionedidaCautelarExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionedidaCautelarExpediente");

                    b.Property<DateTime?>("FecGestionMedidaCautelarExpdiente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecGestionMedidaCautelarExpdiente");

                    b.Property<string>("NumeroOficioMedidaCautelarExpediente")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroOficioMedidaCautelarExpediente");

                    b.Property<int?>("TipoMedidaCautelarId")
                        .HasColumnType("int")
                        .HasColumnName("tipoMedidaCautelarId");

                    b.Property<int?>("TipoSubetapaMedidaCautelarId")
                        .HasColumnType("int")
                        .HasColumnName("tipoSubetapaMedidaCautelarId");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<decimal?>("ValorAvaluoMedidaCautelarExpediente")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("valorAvaluoMedidaCautelarExpediente");

                    b.Property<decimal?>("ValorRemateMedidaCautelarExpediente")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("valorRemateMedidaCautelarExpediente");

                    b.HasKey("IdMedidaCautelarExpediente")
                        .HasName("PK__APLI_MED__467AFCF466098B51");

                    b.HasIndex("DemandadoId");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("TipoMedidaCautelarId");

                    b.HasIndex("TipoSubetapaMedidaCautelarId");

                    b.ToTable("APLI_MEDIDA_CAUTELAR_EXPEDIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliPagare", b =>
                {
                    b.Property<int>("IdPagare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPagare");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPagare"));

                    b.Property<DateTime>("FecCreacionPagare")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionPagare");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NroPagare")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nroPagare");

                    b.Property<int>("TipoPagareId")
                        .HasColumnType("int")
                        .HasColumnName("tipoPagareId");

                    b.HasKey("IdPagare")
                        .HasName("PK__APLI_PAG__74FD2A525E7DC319");

                    b.HasIndex("TipoPagareId");

                    b.ToTable("APLI_PAGARES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliPagaresExpediente", b =>
                {
                    b.Property<int>("IdPagareExpediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPagareExpediente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPagareExpediente"));

                    b.Property<decimal?>("CapitalPagareExpediente")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("capitalPagareExpediente");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActualizacionPagareExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionPagareExpediente");

                    b.Property<DateTime>("FecCreacionPagareExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionPagareExpediente");

                    b.Property<DateTime?>("FecPrescripcionPagareExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecPrescripcionPagareExpediente");

                    b.Property<DateTime?>("FecVencimientoPagareExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecVencimientoPagareExpediente");

                    b.Property<decimal?>("InteresPagareExpediente")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("interesPagareExpediente");

                    b.Property<string>("ObligacionPagareExpediente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("obligacionPagareExpediente");

                    b.Property<decimal?>("OtroValoresPagareExpediente")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("otroValoresPagareExpediente");

                    b.Property<int>("PagareId")
                        .HasColumnType("int")
                        .HasColumnName("pagareId");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<decimal?>("ValorPagareExpediente")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("valorPagareExpediente");

                    b.HasKey("IdPagareExpediente")
                        .HasName("PK__APLI_PAG__A511D37DDD5AA811");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("PagareId");

                    b.ToTable("APLI_PAGARES_EXPEDIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliSubetapa", b =>
                {
                    b.Property<int>("IdSubEtapa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSubEtapa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubEtapa"));

                    b.Property<int>("EstadoSubEtapa")
                        .HasColumnType("int")
                        .HasColumnName("estadoSubEtapa");

                    b.Property<int?>("EventoId")
                        .HasColumnType("int")
                        .HasColumnName("eventoId");

                    b.Property<DateTime?>("FecActualizacionSubEtapa")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionSubEtapa");

                    b.Property<DateTime>("FecCreacionSubEtapa")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionSubEtapa");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreSubEtapa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreSubEtapa");

                    b.Property<int>("NroOrdenSubtapa")
                        .HasColumnType("int")
                        .HasColumnName("nroOrdenSubtapa");

                    b.Property<int>("TipoEtapaId")
                        .HasColumnType("int")
                        .HasColumnName("tipoEtapaId");

                    b.HasKey("IdSubEtapa")
                        .HasName("PK__APLI_SUB__446E2DEF3EF3B060");

                    b.HasIndex("TipoEtapaId");

                    b.ToTable("APLI_SUBETAPAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliSubtipoJuzgado", b =>
                {
                    b.Property<int>("IdSubtipoJuzgado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSubtipoJuzgado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubtipoJuzgado"));

                    b.Property<string>("DescripcionSubtipoJuzgado")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("descripcionSubtipoJuzgado");

                    b.Property<DateTime>("FecCreacionSubtipoJuzgado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionSubtipoJuzgado");

                    b.Property<int>("TipoJuzgadoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoJuzgadoId");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdSubtipoJuzgado")
                        .HasName("PK__APLI_SUB__33DB6AF61424954D");

                    b.HasIndex("TipoJuzgadoId");

                    b.ToTable("APLI_SUBTIPO_JUZGADOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoAsignacione", b =>
                {
                    b.Property<int>("IdTipoAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoAsignacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoAsignacion"));

                    b.Property<string>("DescripcionTipoAsignacion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionTipoAsignacion");

                    b.HasKey("IdTipoAsignacion")
                        .HasName("PK__APLI_TIP__377C788169FDCD07");

                    b.ToTable("APLI_TIPO_ASIGNACIONES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoAvaluo", b =>
                {
                    b.Property<int>("IdTipoAvaluo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoAvaluo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoAvaluo"));

                    b.Property<string>("DescripcionTipoAvaluo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descripcionTipoAvaluo");

                    b.HasKey("IdTipoAvaluo")
                        .HasName("PK__APLI_TIP__F12434E2CF612F3F");

                    b.ToTable("APLI_TIPO_AVALUOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoContacto", b =>
                {
                    b.Property<int>("IdTipoContacto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoContacto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoContacto"));

                    b.Property<string>("DescipcionTipoContacto")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descipcionTipoContacto");

                    b.HasKey("IdTipoContacto")
                        .HasName("PK__APLI_TIP__EF7BE7754EEAC3EE");

                    b.ToTable("APLI_TIPO_CONTACTOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoCuantia", b =>
                {
                    b.Property<int>("IdTipoCuantia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoCuantia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoCuantia"));

                    b.Property<string>("DescripcionTipoCuantia")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descripcionTipoCuantia");

                    b.HasKey("IdTipoCuantia")
                        .HasName("PK__APLI_TIP__9F273BD3D4567D9E");

                    b.ToTable("APLI_TIPO_CUANTIAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoDeuda", b =>
                {
                    b.Property<int>("IdTipoDeuda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoDeuda");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoDeuda"));

                    b.Property<string>("DescipcionTipoDeuda")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descipcionTipoDeuda");

                    b.HasKey("IdTipoDeuda")
                        .HasName("PK__APLI_TIP__2DA4E62725AB823A");

                    b.ToTable("APLI_TIPO_DEUDAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoDiligencia", b =>
                {
                    b.Property<int>("IdTipoDiligencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoDiligencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoDiligencia"));

                    b.Property<string>("DescripcionTipoDiligencia")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descripcionTipoDiligencia");

                    b.HasKey("IdTipoDiligencia")
                        .HasName("PK__APLI_TIP__76917249780DE3C5");

                    b.ToTable("APLI_TIPO_DILIGENCIAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoDocumento", b =>
                {
                    b.Property<int>("IdTipoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoDocumento"));

                    b.Property<string>("NombreTipoDocumento")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombreTipoDocumento");

                    b.Property<int>("TipoPersonaId")
                        .HasColumnType("int")
                        .HasColumnName("tipoPersonaId");

                    b.HasKey("IdTipoDocumento")
                        .HasName("PK__APLI_TIP__61FDF9F5C7C52745");

                    b.HasIndex("TipoPersonaId");

                    b.ToTable("APLI_TIPO_DOCUMENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoEtapa", b =>
                {
                    b.Property<int>("IdTipoEtapa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoEtapa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoEtapa"));

                    b.Property<int>("EstadoTipoEtapa")
                        .HasColumnType("int")
                        .HasColumnName("estadoTipoEtapa");

                    b.Property<DateTime?>("FecActualizacionTipoEtapa")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionTipoEtapa");

                    b.Property<DateTime>("FecCreacionTipoEtapa")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTipoEtapa");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreTipoEtapa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreTipoEtapa");

                    b.Property<int>("NroOrdenEtapa")
                        .HasColumnType("int")
                        .HasColumnName("nroOrdenEtapa");

                    b.Property<int>("TipoProcesoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoProcesoId");

                    b.HasKey("IdTipoEtapa")
                        .HasName("PK__APLI_TIP__19611D342E2D6A12");

                    b.HasIndex("TipoProcesoId");

                    b.ToTable("APLI_TIPO_ETAPAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoEvento", b =>
                {
                    b.Property<int>("IdTipoEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoEvento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoEvento"));

                    b.Property<string>("DescripcionTipoEvento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcionTipoEvento");

                    b.Property<DateTime>("FecCreacionTipoEvento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTipoEvento");

                    b.HasKey("IdTipoEvento")
                        .HasName("PK__APLI_TIP__09EED93A3F68C03F");

                    b.ToTable("APLI_TIPO_EVENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoJuzgado", b =>
                {
                    b.Property<int>("IdTipoJuzgado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoJuzgado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoJuzgado"));

                    b.Property<string>("DescripcionTipoJuzgado")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("descripcionTipoJuzgado");

                    b.Property<DateTime>("FecCreacionTipoJuzgado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTipoJuzgado");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdTipoJuzgado")
                        .HasName("PK__APLI_TIP__0C417944A6502789");

                    b.ToTable("APLI_TIPO_JUZGADOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoPagare", b =>
                {
                    b.Property<int>("IdTipoPagare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoPagare");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoPagare"));

                    b.Property<string>("DescripcionTipoPagare")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcionTipoPagare");

                    b.HasKey("IdTipoPagare")
                        .HasName("PK__APLI_TIP__A288A7DA2E0EE7F2");

                    b.ToTable("APLI_TIPO_PAGARES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoPersona", b =>
                {
                    b.Property<int>("IdTipoPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoPersona");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoPersona"));

                    b.Property<string>("DescripcionTipoPersona")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionTipoPersona");

                    b.HasKey("IdTipoPersona")
                        .HasName("PK__APLI_TIP__68D37AD6556F192D");

                    b.ToTable("APLI_TIPO_PERSONAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoProceso", b =>
                {
                    b.Property<int>("IdTipoProceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoProceso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoProceso"));

                    b.Property<DateTime?>("FecActualizacionProceso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionProceso");

                    b.Property<DateTime>("FecCreacionProceso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionProceso");

                    b.Property<string>("NombreProceso")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreProceso");

                    b.Property<int?>("Usuarioid")
                        .HasColumnType("int")
                        .HasColumnName("usuarioid");

                    b.HasKey("IdTipoProceso")
                        .HasName("PK__APLI_TIP__619F308CDCD7781F");

                    b.ToTable("APLI_TIPO_PROCESOS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliTipoReporte", b =>
                {
                    b.Property<int>("IdTipoReporte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoReporte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoReporte"));

                    b.Property<string>("DescripcionTipoReporte")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionTipoReporte");

                    b.HasKey("IdTipoReporte")
                        .HasName("PK__APLI_TIP__5692713ACDCB72A3");

                    b.ToTable("APLI_TIPO_REPORTES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliVencimientoContrasenia", b =>
                {
                    b.Property<int>("IdVencimientoContrasenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVencimientoContrasenia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVencimientoContrasenia"));

                    b.Property<int>("CantVencimiento")
                        .HasColumnType("int")
                        .HasColumnName("cantVencimiento");

                    b.Property<int>("EstadoVencimientoContrasenia")
                        .HasColumnType("int")
                        .HasColumnName("estadoVencimientoContrasenia");

                    b.Property<DateTime?>("FecActualizacionVencimientoContrasenia")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionVencimientoContrasenia");

                    b.Property<DateTime>("FecCreacionVencimientoContrasenia")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionVencimientoContrasenia");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.HasKey("IdVencimientoContrasenia")
                        .HasName("PK__APLI_VEN__5C5D7D86414BFC5A");

                    b.ToTable("APLI_VENCIMIENTO_CONTRASENIAS", (string)null);
                });

            modelBuilder.Entity("Domain.ApliVencimientoContraseniasCliente", b =>
                {
                    b.Property<int>("IdVencimientoContraseniaCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVencimientoContraseniaCliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVencimientoContraseniaCliente"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<int>("EstadoVencimientoContraseniaCliente")
                        .HasColumnType("int")
                        .HasColumnName("estadoVencimientoContraseniaCliente");

                    b.Property<DateTime?>("FecActualizacionVencimientoContraseniaCliente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionVencimientoContraseniaCliente");

                    b.Property<DateTime>("FecCreacionVencimientoContraseniaCliente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionVencimientoContraseniaCliente");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<int>("VencimientoContraseniaId")
                        .HasColumnType("int")
                        .HasColumnName("vencimientoContraseniaId");

                    b.HasKey("IdVencimientoContraseniaCliente")
                        .HasName("PK__APLI_VEN__7D576B83DF34B45A");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VencimientoContraseniaId");

                    b.ToTable("APLI_VENCIMIENTO_CONTRASENIAS_CLIENTE", (string)null);
                });

            modelBuilder.Entity("Domain.AsicExpediente", b =>
                {
                    b.Property<int>("IdExpediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idExpediente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpediente"));

                    b.Property<int?>("AbogadoId")
                        .HasColumnType("int")
                        .HasColumnName("abogadoId");

                    b.Property<int?>("ApoderadoId")
                        .HasColumnType("int")
                        .HasColumnName("apoderadoId");

                    b.Property<int?>("CabeceraId")
                        .HasColumnType("int")
                        .HasColumnName("cabeceraId");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<int?>("CuentaId")
                        .HasColumnType("int")
                        .HasColumnName("cuentaId");

                    b.Property<int?>("DemandadoId")
                        .HasColumnType("int")
                        .HasColumnName("demandadoId");

                    b.Property<int?>("DemandadoId2")
                        .HasColumnType("int")
                        .HasColumnName("demandadoId2");

                    b.Property<int?>("DemandadoId3")
                        .HasColumnType("int")
                        .HasColumnName("demandadoId3");

                    b.Property<int?>("DemandadoId4")
                        .HasColumnType("int")
                        .HasColumnName("demandadoId4");

                    b.Property<int?>("DemandanteId")
                        .HasColumnType("int")
                        .HasColumnName("demandanteId");

                    b.Property<bool?>("DocFngTramitado")
                        .HasColumnType("bit")
                        .HasColumnName("docFngTramitado");

                    b.Property<int?>("EstadoDetalle")
                        .HasColumnType("int")
                        .HasColumnName("estadoDetalle");

                    b.Property<int?>("EstadoProcesalId")
                        .HasColumnType("int")
                        .HasColumnName("estadoProcesalId");

                    b.Property<string>("Expediente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("expediente");

                    b.Property<DateTime?>("FecAsignacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecAsignacion");

                    b.Property<DateTime?>("FecCreacionExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionExpediente");

                    b.Property<DateTime?>("FecLiquidacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecLiquidacion");

                    b.Property<DateTime?>("FecPresentacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecPresentacion");

                    b.Property<DateTime?>("FecSustitucion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecSustitucion");

                    b.Property<bool?>("FlagFng")
                        .HasColumnType("bit")
                        .HasColumnName("flagFng");

                    b.Property<string>("Gyc")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("gyc");

                    b.Property<string>("Llave")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("llave");

                    b.Property<string>("NroRadicacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nroRadicacion");

                    b.Property<string>("NroRadicacionCorta")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nroRadicacionCorta");

                    b.Property<string>("ObservacionDetalle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("observacionDetalle");

                    b.Property<bool?>("PlanCompartir")
                        .HasColumnType("bit")
                        .HasColumnName("planCompartir");

                    b.Property<DateTime?>("PrescripcionDetalle")
                        .HasColumnType("datetime")
                        .HasColumnName("prescripcionDetalle");

                    b.Property<int?>("RepresentanteId")
                        .HasColumnType("int")
                        .HasColumnName("representanteId");

                    b.Property<int?>("SedeId")
                        .HasColumnType("int")
                        .HasColumnName("sedeId");

                    b.Property<int?>("SubEtapaId")
                        .HasColumnType("int")
                        .HasColumnName("subEtapaId");

                    b.Property<int?>("TipoProcesoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoProcesoId");

                    b.Property<int?>("TipocuantiaId")
                        .HasColumnType("int")
                        .HasColumnName("tipocuantiaId");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<decimal?>("ValorLiquidacion")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("valorLiquidacion");

                    b.Property<decimal?>("ValorRemate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("valorRemate");

                    b.Property<decimal?>("VrPagoFng")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("vrPagoFng");

                    b.HasKey("IdExpediente")
                        .HasName("PK__ASIC_EXP__ED873AE3406826D2");

                    b.HasIndex("AbogadoId");

                    b.HasIndex("ApoderadoId");

                    b.HasIndex("CabeceraId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CuentaId");

                    b.HasIndex("DemandadoId");

                    b.HasIndex("DemandanteId");

                    b.HasIndex("EstadoProcesalId");

                    b.HasIndex("RepresentanteId");

                    b.HasIndex("SedeId");

                    b.HasIndex("SubEtapaId");

                    b.HasIndex("TipoProcesoId");

                    b.HasIndex("TipocuantiaId");

                    b.ToTable("ASIC_EXPEDIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.AsicExpedienteCargaErrore", b =>
                {
                    b.Property<int>("IdExpedienteCargaError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idExpedienteCargaError");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExpedienteCargaError"));

                    b.Property<string>("DescripcionCampoExpediente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionCampoExpediente");

                    b.Property<string>("DescripcionErrorExpediente")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("descripcionErrorExpediente");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime>("FecCargaErrorExpediente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCargaErrorExpediente");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<int>("NroFilaExpediente")
                        .HasColumnType("int")
                        .HasColumnName("nroFilaExpediente");

                    b.HasKey("IdExpedienteCargaError")
                        .HasName("PK__ASIC_EXP__DC0062F39A414237");

                    b.HasIndex("ExpedienteId");

                    b.ToTable("ASIC_EXPEDIENTE_CARGA_ERRORES", (string)null);
                });

            modelBuilder.Entity("Domain.AsicMasivaCabecera", b =>
                {
                    b.Property<int>("IdCabecera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCabecera");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCabecera"));

                    b.Property<int>("FlagAceptacion")
                        .HasColumnType("int")
                        .HasColumnName("flagAceptacion");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("loteId");

                    b.Property<string>("NombreDocumentoCabecera")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreDocumentoCabecera");

                    b.Property<int>("RegistrosErroneosCabecera")
                        .HasColumnType("int")
                        .HasColumnName("registrosErroneosCabecera");

                    b.Property<int>("RegistrosTotalesCabecera")
                        .HasColumnType("int")
                        .HasColumnName("registrosTotalesCabecera");

                    b.Property<string>("TipoDocumentoCabecera")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoDocumentoCabecera");

                    b.HasKey("IdCabecera")
                        .HasName("PK__ASIC_MAS__33F2D28269A75D6B");

                    b.HasIndex("LoteId");

                    b.ToTable("ASIC_MASIVA_CABECERAS", (string)null);
                });

            modelBuilder.Entity("Domain.AsicMasivaLote", b =>
                {
                    b.Property<int>("IdLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLote");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLote"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<int>("EstadoLotes")
                        .HasColumnType("int")
                        .HasColumnName("estadoLotes");

                    b.Property<DateTime?>("FecActualizacionLote")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionLote");

                    b.Property<DateTime>("FecCreacionLote")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionLote");

                    b.Property<string>("NombreLote")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("nombreLote");

                    b.HasKey("IdLote")
                        .HasName("PK__ASIC_MAS__1B91FFCBFAD443AD");

                    b.HasIndex("ClienteId");

                    b.ToTable("ASIC_MASIVA_LOTES", (string)null);
                });

            modelBuilder.Entity("Domain.AsicMasivaLoteCargaErrore", b =>
                {
                    b.Property<int>("IdLotesCargaError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLotesCargaError");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLotesCargaError"));

                    b.Property<string>("DescripcionCampoLote")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionCampoLote");

                    b.Property<string>("DescripcionErrorLote")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("descripcionErrorLote");

                    b.Property<DateTime>("FecCargaErrorLote")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCargaErrorLote");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("loteId");

                    b.Property<int>("NroFilaLote")
                        .HasColumnType("int")
                        .HasColumnName("nroFilaLote");

                    b.HasKey("IdLotesCargaError")
                        .HasName("PK__ASIC_MAS__868348BBA85F5A09");

                    b.HasIndex("LoteId");

                    b.ToTable("ASIC_MASIVA_LOTE_CARGA_ERRORES", (string)null);
                });

            modelBuilder.Entity("Domain.AsicSede", b =>
                {
                    b.Property<int>("IdSede")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSede");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSede"));

                    b.Property<string>("DepartamentoSede")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("departamentoSede");

                    b.Property<int>("EstadoSede")
                        .HasColumnType("int")
                        .HasColumnName("estadoSede");

                    b.Property<string>("PaisSede")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("paisSede");

                    b.Property<string>("ProvinciaSede")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("provinciaSede");

                    b.HasKey("IdSede")
                        .HasName("PK__ASIC_SED__C5AF63D0FC52AEB6");

                    b.ToTable("ASIC_SEDES", (string)null);
                });

            modelBuilder.Entity("Domain.BendActividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descripcion");

                    b.Property<bool?>("EsDetenido")
                        .HasColumnType("bit")
                        .HasColumnName("esDetenido");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaAlta");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaAsignacion");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaCancelacion");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaInicio");

                    b.Property<DateTime?>("FechaReactivacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaReactivacion");

                    b.Property<DateTime?>("FechaReingreso")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaReingreso");

                    b.Property<DateTime?>("FechaSuspension")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaSuspension");

                    b.Property<DateTime?>("FechaTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaTermino");

                    b.Property<string>("IdActividad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idActividad");

                    b.Property<string>("IdExpediente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("idExpediente");

                    b.Property<long?>("IdReproceso")
                        .HasColumnType("bigint")
                        .HasColumnName("idReproceso");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("idRol");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<long>("IdWorkFlow")
                        .HasColumnType("bigint")
                        .HasColumnName("idWorkFlow");

                    b.Property<bool?>("Permiso")
                        .HasColumnType("bit")
                        .HasColumnName("permiso");

                    b.Property<string>("Status")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__BEND_ACT__3213E83F524DA46B");

                    b.ToTable("BEND_ACTIVIDADES", (string)null);
                });

            modelBuilder.Entity("Domain.BendCampoCliente", b =>
                {
                    b.Property<int>("IdCampoCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCampoCliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCampoCliente"));

                    b.Property<int>("CampoId")
                        .HasColumnType("int")
                        .HasColumnName("campoId");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<int>("EstadoCampoCliente")
                        .HasColumnType("int")
                        .HasColumnName("estadoCampoCliente");

                    b.Property<int>("OrdenCampo")
                        .HasColumnType("int")
                        .HasColumnName("ordenCampo");

                    b.HasKey("IdCampoCliente")
                        .HasName("PK__BEND_CAM__F627E5564ECE3F7F");

                    b.HasIndex("CampoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("BEND_CAMPO_CLIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.BendCatActividadesW", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Actividad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("actividad");

                    b.Property<string>("Etapa")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("etapa");

                    b.Property<string>("IdActividad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("idActividad");

                    b.Property<string>("IdProceso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("idProceso");

                    b.Property<string>("Page")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("page");

                    b.Property<string>("Proceso")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("proceso");

                    b.Property<int?>("TiempoPromedio")
                        .HasColumnType("int")
                        .HasColumnName("tiempoPromedio");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PK__BEND_CAT__3213E83FC89B33AE");

                    b.ToTable("BEND_CAT_ACTIVIDADES_WS", (string)null);
                });

            modelBuilder.Entity("Domain.BendCustomizaElemento", b =>
                {
                    b.Property<int>("IdCustomizaElemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCustomizaElemento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCustomizaElemento"));

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacion");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacion");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombre");

                    b.Property<string>("TipoColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipoColor");

                    b.HasKey("IdCustomizaElemento")
                        .HasName("PK__BEND_CUS__3EB03196B999C708");

                    b.ToTable("BEND_CUSTOMIZA_ELEMENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeceval", b =>
                {
                    b.Property<int>("IdDeceval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeceval");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeceval"));

                    b.Property<string>("Activo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("activo");

                    b.Property<string>("Certficicado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("certficicado");

                    b.Property<int?>("CuentaId")
                        .HasColumnType("int")
                        .HasColumnName("cuentaId");

                    b.Property<int?>("DeudorDecevalId")
                        .HasColumnType("int")
                        .HasColumnName("deudorDecevalId");

                    b.Property<string>("Digital")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("digital");

                    b.Property<string>("Enlace")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("enlace");

                    b.Property<string>("Estado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("estado");

                    b.Property<string>("FecActualizacion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("fecActualizacion");

                    b.Property<string>("FecCreacion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("fecCreacion");

                    b.Property<string>("FecExpedicion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("fecExpedicion");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaVencimiento");

                    b.Property<string>("Mti")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("mti");

                    b.Property<string>("Observacion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("observacion");

                    b.Property<string>("Proceso")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("proceso");

                    b.Property<int?>("SedeId")
                        .HasColumnType("int")
                        .HasColumnName("sedeId");

                    b.Property<string>("TipoCertificado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoCertificado");

                    b.Property<string>("TipoPagare")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoPagare");

                    b.Property<string>("Unidad")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("unidad");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("valor");

                    b.Property<decimal?>("ValorInteres")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("valorInteres");

                    b.HasKey("IdDeceval")
                        .HasName("PK__BEND_DEC__B56AF5230CDE5CD1");

                    b.HasIndex("CuentaId");

                    b.HasIndex("DeudorDecevalId");

                    b.HasIndex("SedeId");

                    b.ToTable("BEND_DECEVAL", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeudorBien", b =>
                {
                    b.Property<int>("IdDeudorBien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeudorBien");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeudorBien"));

                    b.Property<int>("DeudorId")
                        .HasColumnType("int")
                        .HasColumnName("deudorId");

                    b.Property<DateTime?>("FecCreacionDeudorBien")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionDeudorBien");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdDeudorBien")
                        .HasName("PK__BEND_DEU__B6C4A93F26C9A231");

                    b.HasIndex("DeudorId");

                    b.ToTable("BEND_DEUDOR_BIEN", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeudorDeceval", b =>
                {
                    b.Property<int>("IdDeudorDeceval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeudorDeceval");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeudorDeceval"));

                    b.Property<int?>("DeudorId")
                        .HasColumnType("int")
                        .HasColumnName("deudorId");

                    b.Property<string>("EstadoDeceval")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estadoDeceval");

                    b.Property<int?>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecRecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecRecepcion");

                    b.Property<DateTime?>("FecSolicitud")
                        .HasColumnType("datetime")
                        .HasColumnName("fecSolicitud");

                    b.HasKey("IdDeudorDeceval")
                        .HasName("PK__BEND_DEU__40144E53CC7426EE");

                    b.HasIndex("DeudorId");

                    b.HasIndex("ExpedienteId");

                    b.ToTable("BEND_DEUDOR_DECEVAL", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeudorRamaJudicial", b =>
                {
                    b.Property<int>("IdDeudorRamaJudicial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeudorRamaJudicial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeudorRamaJudicial"));

                    b.Property<int?>("DeudorId")
                        .HasColumnType("int")
                        .HasColumnName("deudorId");

                    b.Property<DateTime?>("FecFintTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fecFintTermino");

                    b.Property<DateTime?>("FecInicioTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioTermino");

                    b.Property<DateTime?>("FecRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecRegistro");

                    b.Property<string>("NroRadicacion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroRadicacion");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdDeudorRamaJudicial")
                        .HasName("PK__BEND_DEU__25C7BFE5F3276A1A");

                    b.HasIndex("DeudorId");

                    b.ToTable("BEND_DEUDOR_RAMA_JUDICIAL", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeudorSalario", b =>
                {
                    b.Property<int>("IdDeudorSalario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeudorSalario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeudorSalario"));

                    b.Property<int>("DeudorId")
                        .HasColumnType("int")
                        .HasColumnName("deudorId");

                    b.Property<DateTime?>("FecCreacionSaliario")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionSaliario");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdDeudorSalario")
                        .HasName("PK__BEND_DEU__351AE0F5A5D3056E");

                    b.HasIndex("DeudorId");

                    b.ToTable("BEND_DEUDOR_SALARIO", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeudorVehiculo", b =>
                {
                    b.Property<int>("IdDeudorVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeudorVehiculo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeudorVehiculo"));

                    b.Property<int>("DeudorId")
                        .HasColumnType("int")
                        .HasColumnName("deudorId");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacion");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacion");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdDeudorVehiculo")
                        .HasName("PK__BEND_DEU__015479B9CD0D5A8B");

                    b.HasIndex("DeudorId");

                    b.ToTable("BEND_DEUDOR_VEHICULO", (string)null);
                });

            modelBuilder.Entity("Domain.BendDeudore", b =>
                {
                    b.Property<int>("IdDeudor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDeudor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeudor"));

                    b.Property<string>("ApeMaternoDeudor")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("apeMaternoDeudor");

                    b.Property<string>("ApePaternoDeudor")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("apePaternoDeudor");

                    b.Property<DateTime?>("FecCreacionDeudor")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionDeudor");

                    b.Property<string>("NombreDeudor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombreDeudor");

                    b.Property<string>("NroDocumento")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroDocumento");

                    b.Property<int>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("paisId");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdDeudor")
                        .HasName("PK__BEND_DEU__8FA83C7282E33368");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("BEND_DEUDORES", (string)null);
                });

            modelBuilder.Entity("Domain.BendEstadoElectronicosRj", b =>
                {
                    b.Property<int>("IdEstadoElectronico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEstadoElectronico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoElectronico"));

                    b.Property<int>("AnioEstadoElectronico")
                        .HasColumnType("int")
                        .HasColumnName("anioEstadoElectronico");

                    b.Property<string>("EnlaceEstadoElectronico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("enlaceEstadoElectronico");

                    b.Property<DateTime?>("FecActualizacionEstadoElectronico")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionEstadoElectronico");

                    b.Property<DateTime>("FecCreacionEstadoElectronico")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionEstadoElectronico");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<int?>("JuzgadoId")
                        .HasColumnType("int")
                        .HasColumnName("juzgadoId");

                    b.Property<string>("XpathPestEstadoElectronico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("xpathPestEstadoElectronico");

                    b.Property<string>("XpathTabEstadoElectronico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("xpathTabEstadoElectronico");

                    b.HasKey("IdEstadoElectronico")
                        .HasName("PK__BEND_EST__70DB6CA38D8058AE");

                    b.HasIndex("JuzgadoId");

                    b.ToTable("BEND_ESTADO_ELECTRONICOS_RJ", (string)null);
                });

            modelBuilder.Entity("Domain.BendGarantiaFavore", b =>
                {
                    b.Property<int>("IdGarantiaFavor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGarantiaFavor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGarantiaFavor"));

                    b.Property<string>("ConfeCamara")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("confeCamara");

                    b.Property<DateTime?>("FecInscripcionGarantiaFavor")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInscripcionGarantiaFavor");

                    b.Property<string>("IdentificacionAcreedor")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("identificacionAcreedor");

                    b.Property<string>("PatrimonioAutonomo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("patrimonioAutonomo");

                    b.HasKey("IdGarantiaFavor")
                        .HasName("PK__BEND_GAR__DAB8DF288384CA15");

                    b.ToTable("BEND_GARANTIA_FAVORES", (string)null);
                });

            modelBuilder.Entity("Domain.BendHistBusqBienesDetalle", b =>
                {
                    b.Property<int>("IdHistBusqBien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistBusqBien");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistBusqBien"));

                    b.Property<string>("Avaluo")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("avaluo");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("ciudad");

                    b.Property<string>("DetalleError")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("detalleError");

                    b.Property<int>("DeudorBienId")
                        .HasColumnType("int")
                        .HasColumnName("deudorBienId");

                    b.Property<string>("Direccion")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("direccion");

                    b.Property<string>("ErrorBusqueda")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("errorBusqueda");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FecBusqueda")
                        .HasColumnType("datetime")
                        .HasColumnName("fecBusqueda");

                    b.Property<DateTime?>("FecCreacionBien")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionBien");

                    b.Property<string>("Matricula")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("matricula");

                    b.Property<string>("Observacion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("observacion");

                    b.Property<string>("OficinaRegistro")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("oficinaRegistro");

                    b.HasKey("IdHistBusqBien")
                        .HasName("PK__BEND_HIS__779B445CE06BE16C");

                    b.HasIndex("DeudorBienId");

                    b.ToTable("BEND_HIST_BUSQ_BIENES_DETALLES", (string)null);
                });

            modelBuilder.Entity("Domain.BendHistBusqSalariosDetalle", b =>
                {
                    b.Property<int>("IdHistBusqSalario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistBusqSalario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistBusqSalario"));

                    b.Property<string>("DetalleError")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("detalleError");

                    b.Property<int>("DeudorSalarioId")
                        .HasColumnType("int")
                        .HasColumnName("deudorSalarioId");

                    b.Property<string>("DireccionEmpresa")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("direccionEmpresa");

                    b.Property<string>("Empresa")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("empresa");

                    b.Property<string>("EntidadSalario")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("entidadSalario");

                    b.Property<string>("ErrorBusqueda")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("errorBusqueda");

                    b.Property<int?>("EstadoSalario")
                        .HasColumnType("int")
                        .HasColumnName("estadoSalario");

                    b.Property<DateTime?>("FecAfilEfectiva")
                        .HasColumnType("datetime")
                        .HasColumnName("fecAfilEfectiva");

                    b.Property<DateTime?>("FecAfilFinalizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecAfilFinalizacion");

                    b.Property<DateTime?>("FecBusqueda")
                        .HasColumnType("datetime")
                        .HasColumnName("fecBusqueda");

                    b.Property<string>("NroDocumento")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroDocumento");

                    b.Property<string>("Observacion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("observacion");

                    b.Property<decimal?>("Salario")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("salario");

                    b.Property<string>("TipoAfiliadoSalario")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoAfiliadoSalario");

                    b.Property<int?>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.Property<string>("TipoRegimenSalario")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoRegimenSalario");

                    b.HasKey("IdHistBusqSalario")
                        .HasName("PK__BEND_HIS__7FDEC5D44F692695");

                    b.HasIndex("DeudorSalarioId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("BEND_HIST_BUSQ_SALARIOS_DETALLES", (string)null);
                });

            modelBuilder.Entity("Domain.BendHistBusqVehiculosDetalle", b =>
                {
                    b.Property<int>("IdHistBusqVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistBusqVehiculo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistBusqVehiculo"));

                    b.Property<string>("AutoridadTransitoVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("autoridadTransitoVehiculo");

                    b.Property<string>("CilindrajeVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cilindrajeVehiculo");

                    b.Property<string>("CiudadVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ciudadVehiculo");

                    b.Property<string>("ClasicoAntiguoVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("clasicoAntiguoVehiculo");

                    b.Property<string>("ColorVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("colorVehiculo");

                    b.Property<string>("CombustibleVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("combustibleVehiculo");

                    b.Property<string>("DetalleError")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("detalleError");

                    b.Property<int>("DeudorVehiculoId")
                        .HasColumnType("int")
                        .HasColumnName("deudorVehiculoId");

                    b.Property<string>("ErrorBusqueda")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("errorBusqueda");

                    b.Property<string>("EstadoGarFavorDe")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("estadoGarFavorDe");

                    b.Property<string>("EstadoLimPropiedadVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("estadoLimPropiedadVehiculo");

                    b.Property<string>("EstadoRuntVehiculo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estadoRuntVehiculo");

                    b.Property<int?>("EstadoVehiculo")
                        .HasColumnType("int")
                        .HasColumnName("estadoVehiculo");

                    b.Property<DateTime?>("FecMatriculaInicialVehiculo")
                        .HasColumnType("datetime")
                        .HasColumnName("fecMatriculaInicialVehiculo");

                    b.Property<int?>("GarantiaFavorId")
                        .HasColumnType("int")
                        .HasColumnName("garantiaFavorId");

                    b.Property<string>("GravemenesPropiedad")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("gravemenesPropiedad");

                    b.Property<int?>("LimitacionPropiedadId")
                        .HasColumnType("int")
                        .HasColumnName("limitacionPropiedadId");

                    b.Property<string>("LineaVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("lineaVehiculo");

                    b.Property<string>("MarcaVehiculo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("marcaVehiculo");

                    b.Property<string>("ModeloVehiculo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modeloVehiculo");

                    b.Property<string>("NroChasisVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroChasisVehiculo");

                    b.Property<string>("NroMotorVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroMotorVehiculo");

                    b.Property<string>("NroPlacaVehiculo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nroPlacaVehiculo");

                    b.Property<string>("NroSerieVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroSerieVehiculo");

                    b.Property<string>("NroVinVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroVinVehiculo");

                    b.Property<string>("Observacion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("observacion");

                    b.Property<string>("OficinaRegistro")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("oficinaRegistro");

                    b.Property<string>("OtrasCaracteristicas")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("otrasCaracteristicas");

                    b.Property<string>("RepotenciadoVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("repotenciadoVehiculo");

                    b.Property<string>("TipoCarroceriaVehiculo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoCarroceriaVehiculo");

                    b.HasKey("IdHistBusqVehiculo")
                        .HasName("PK__BEND_HIS__AB4588F3A8EB12C2");

                    b.HasIndex("DeudorVehiculoId");

                    b.HasIndex("GarantiaFavorId");

                    b.HasIndex("LimitacionPropiedadId");

                    b.ToTable("BEND_HIST_BUSQ_VEHICULOS_DETALLES", (string)null);
                });

            modelBuilder.Entity("Domain.BendHistRamaJudicial", b =>
                {
                    b.Property<int>("IdHistRamaJudicial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistRamaJudicial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistRamaJudicial"));

                    b.Property<string>("ActuacionAnotacion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("actuacionAnotacion");

                    b.Property<string>("Anotacion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("anotacion");

                    b.Property<string>("ClaseProcesoRamaJudicial")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("claseProcesoRamaJudicial");

                    b.Property<string>("CoincidenciaRamaJudicial")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("coincidenciaRamaJudicial");

                    b.Property<string>("Concateacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("concateacion");

                    b.Property<string>("ConcateacionTyba")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("concateacionTyba");

                    b.Property<string>("DemandanteRamaJudicial")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("demandanteRamaJudicial");

                    b.Property<string>("DepartamentoRamaJudicial")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("departamentoRamaJudicial");

                    b.Property<string>("DespachoRamaJudicial")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("despachoRamaJudicial");

                    b.Property<string>("DetalleError")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("detalleError");

                    b.Property<int?>("DeudorRamaJudicialId")
                        .HasColumnType("int")
                        .HasColumnName("deudorRamaJudicialId");

                    b.Property<string>("ErrorBusqueda")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("errorBusqueda");

                    b.Property<string>("EstadoRamaJudicial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estadoRamaJudicial");

                    b.Property<int?>("ExpedienteId")
                        .HasColumnType("int")
                        .HasColumnName("expedienteId");

                    b.Property<DateTime?>("FecActuacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActuacion");

                    b.Property<DateTime?>("FecActuacionTybaProceso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActuacionTybaProceso");

                    b.Property<DateTime?>("FecActualizacionAntRamaJudicial")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionAntRamaJudicial");

                    b.Property<DateTime?>("FecActualizacionRamaJudicial")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionRamaJudicial");

                    b.Property<DateTime?>("FecBusqueda")
                        .HasColumnType("datetime")
                        .HasColumnName("fecBusqueda");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacion");

                    b.Property<DateTime>("FecCreacionRamaJudicial")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionRamaJudicial");

                    b.Property<DateTime?>("FecFintTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fecFintTermino");

                    b.Property<DateTime?>("FecInicioTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioTermino");

                    b.Property<DateTime?>("FecRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecRegistro");

                    b.Property<DateTime?>("FecRegistroTybaProceso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecRegistroTybaProceso");

                    b.Property<DateTime?>("FechaActualizacionMicrositio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaActualizacionMicrositioP4")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaCarga")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaMicrositio")
                        .HasColumnType("datetime");

                    b.Property<int?>("JuzgadoId")
                        .HasColumnType("int")
                        .HasColumnName("juzgadoId");

                    b.Property<string>("LlaveRamaJudicial")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("llaveRamaJudicial");

                    b.Property<string>("ObservacionMicrositio")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ObservacionMicrositioP4")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RutaDctoPdf")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("rutaDctoPdf");

                    b.Property<string>("RutaDctoPdfEstado")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RutaDctoPdfEstadoP4")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RutaDctoPdfProvidP4")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SedeId")
                        .HasColumnType("int")
                        .HasColumnName("sedeId");

                    b.Property<string>("SolicitaDetalleEstado")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("solicitaDetalleEstado");

                    b.Property<string>("TipActuacionesTybaProceso")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipActuacionesTybaProceso");

                    b.Property<int>("UsuarioCreacionRamaJudicial")
                        .HasColumnType("int")
                        .HasColumnName("usuarioCreacionRamaJudicial");

                    b.HasKey("IdHistRamaJudicial")
                        .HasName("PK__BEND_HIS__F1A006A011A0646C");

                    b.HasIndex("DeudorRamaJudicialId");

                    b.HasIndex("JuzgadoId");

                    b.HasIndex("SedeId");

                    b.ToTable("BEND_HIST_RAMA_JUDICIAL", (string)null);
                });

            modelBuilder.Entity("Domain.BendHistValidacione", b =>
                {
                    b.Property<int>("IdHistValidacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistValidacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistValidacion"));

                    b.Property<string>("CodigoVerifHistValidacion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("codigoVerifHistValidacion");

                    b.Property<string>("EmailHistValidacion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailHistValidacion");

                    b.Property<DateTime>("FecCodigoVerifHistValidacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCodigoVerifHistValidacion");

                    b.Property<DateTime>("FecInicioSesionHistValidacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioSesionHistValidacion");

                    b.Property<int>("FlagExitoSesionHistValidacion")
                        .HasColumnType("int")
                        .HasColumnName("flagExitoSesionHistValidacion");

                    b.Property<int>("LocacionId")
                        .HasColumnType("int")
                        .HasColumnName("locacionId");

                    b.Property<string>("TelefonoHistValidacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefonoHistValidacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<int>("ValidacionId")
                        .HasColumnType("int")
                        .HasColumnName("validacionId");

                    b.HasKey("IdHistValidacion")
                        .HasName("PK__BEND_HIS__732CFC9A822A0670");

                    b.HasIndex("LocacionId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("ValidacionId");

                    b.ToTable("BEND_HIST_VALIDACIONES", (string)null);
                });

            modelBuilder.Entity("Domain.BendLimitacionPropiedade", b =>
                {
                    b.Property<int>("IdLimitacionPropiedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLimitacionPropiedad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLimitacionPropiedad"));

                    b.Property<string>("Departamento")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("departamento");

                    b.Property<string>("EntidadJuridica")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("entidadJuridica");

                    b.Property<DateTime?>("FecExpedicionOficio")
                        .HasColumnType("datetime")
                        .HasColumnName("fecExpedicionOficio");

                    b.Property<DateTime?>("FecRegistroSistema")
                        .HasColumnType("datetime")
                        .HasColumnName("fecRegistroSistema");

                    b.Property<string>("Municipio")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("municipio");

                    b.Property<string>("NroOficio")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nroOficio");

                    b.Property<string>("TipoLimitacionPropiedad")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoLimitacionPropiedad");

                    b.HasKey("IdLimitacionPropiedad")
                        .HasName("PK__BEND_LIM__35AC6A411E9CADC4");

                    b.ToTable("BEND_LIMITACION_PROPIEDADES", (string)null);
                });

            modelBuilder.Entity("Domain.BendObjeto", b =>
                {
                    b.Property<int>("IdObjeto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idObjeto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdObjeto"));

                    b.Property<int>("EstadoObjeto")
                        .HasColumnType("int")
                        .HasColumnName("estadoObjeto");

                    b.Property<string>("NombreObjeto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreObjeto");

                    b.Property<int?>("PadreObjetoId")
                        .HasColumnType("int")
                        .HasColumnName("padreObjetoId");

                    b.Property<string>("RutaObjeto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("rutaObjeto");

                    b.Property<int>("TipoAmbienteId")
                        .HasColumnType("int")
                        .HasColumnName("tipoAmbienteId");

                    b.Property<int>("TipoObjetoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoObjetoId");

                    b.HasKey("IdObjeto")
                        .HasName("PK__BEND_OBJ__C3C88194B35110F8");

                    b.HasIndex("TipoAmbienteId");

                    b.HasIndex("TipoObjetoId");

                    b.ToTable("BEND_OBJETOS", (string)null);
                });

            modelBuilder.Entity("Domain.BendPlantillaCampo", b =>
                {
                    b.Property<int>("IdCampo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCampo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCampo"));

                    b.Property<string>("DescripcionCampo")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("descripcionCampo");

                    b.Property<int>("EstadoCampo")
                        .HasColumnType("int")
                        .HasColumnName("estadoCampo");

                    b.Property<DateTime>("FecCreacionCampo")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionCampo");

                    b.Property<string>("GrupoCampo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("grupoCampo");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreCampo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nombreCampo");

                    b.Property<bool>("RequeridoCampo")
                        .HasColumnType("bit")
                        .HasColumnName("requeridoCampo");

                    b.Property<string>("TipoControlCampo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("tipoControlCampo");

                    b.Property<string>("TipoDatoCampo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoDatoCampo");

                    b.HasKey("IdCampo")
                        .HasName("PK__BEND_PLA__5245D63CF5F18C9E");

                    b.ToTable("BEND_PLANTILLA_CAMPOS", (string)null);
                });

            modelBuilder.Entity("Domain.BendPreguntaSesione", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPregunta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregunta"));

                    b.Property<string>("DescripcionPregunta")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionPregunta");

                    b.HasKey("IdPregunta")
                        .HasName("PK__BEND_PRE__623EEC4237F68B14");

                    b.ToTable("BEND_PREGUNTA_SESIONES", (string)null);
                });

            modelBuilder.Entity("Domain.BendRespuestaSesione", b =>
                {
                    b.Property<int>("IdRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRespuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRespuesta"));

                    b.Property<string>("DescripcionRespuesta")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionRespuesta");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int")
                        .HasColumnName("preguntaId");

                    b.HasKey("IdRespuesta")
                        .HasName("PK__BEND_RES__8AB5BFC843F16337");

                    b.HasIndex("PreguntaId");

                    b.ToTable("BEND_RESPUESTA_SESIONES", (string)null);
                });

            modelBuilder.Entity("Domain.BendTbletapa", b =>
                {
                    b.Property<int>("IdEtapa")
                        .HasColumnType("int")
                        .HasColumnName("idEtapa");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaAlta");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaBaja");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nombre");

                    b.Property<int?>("TiempoPromedio")
                        .HasColumnType("int")
                        .HasColumnName("tiempoPromedio");

                    b.Property<string>("TipoFlujo")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("tipoFlujo");

                    b.HasKey("IdEtapa")
                        .HasName("PK__BEND_TBL__C587A24F24A9C6AB");

                    b.ToTable("BEND_TBLETAPAS", (string)null);
                });

            modelBuilder.Entity("Domain.BendTipoExpDocumento", b =>
                {
                    b.Property<int>("IdTipoExpDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoExpDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoExpDocumento"));

                    b.Property<string>("DescripcionTipoExpDocumento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionTipoExpDocumento");

                    b.Property<DateTime?>("FecCreacionTipoExpDocumento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTipoExpDocumento");

                    b.HasKey("IdTipoExpDocumento")
                        .HasName("PK__BEND_TIP__B5486DC0493BA8F3");

                    b.ToTable("BEND_TIPO_EXP_DOCUMENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.BendTipoObjeto", b =>
                {
                    b.Property<int>("IdTipoObjeto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoObjeto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoObjeto"));

                    b.Property<string>("DescriptcionTipoObjeto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descriptcionTipoObjeto");

                    b.Property<int>("EstadoTipoObjeto")
                        .HasColumnType("int")
                        .HasColumnName("estadoTipoObjeto");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.HasKey("IdTipoObjeto")
                        .HasName("PK__BEND_TIP__D3389F8ED680DD0F");

                    b.ToTable("BEND_TIPO_OBJETOS", (string)null);
                });

            modelBuilder.Entity("Domain.BendUsuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("contrasena");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FecAltaUsuario")
                        .HasColumnType("datetime")
                        .HasColumnName("fecAltaUsuario");

                    b.Property<DateTime?>("FecBajaUsuario")
                        .HasColumnType("datetime")
                        .HasColumnName("fecBajaUsuario");

                    b.HasKey("UsuarioId")
                        .HasName("PK__BEND_USU__A5B1AB8E3FBD4A7A");

                    b.ToTable("BEND_USUARIOS", (string)null);
                });

            modelBuilder.Entity("Domain.BendValidacione", b =>
                {
                    b.Property<int>("IdValidacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idValidacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValidacion"));

                    b.Property<string>("TipoValidacion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoValidacion");

                    b.HasKey("IdValidacion")
                        .HasName("PK__BEND_VAL__B0AAE7CFAAB8B7C6");

                    b.ToTable("BEND_VALIDACIONES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffApoderado", b =>
                {
                    b.Property<int>("IdApoderado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idApoderado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdApoderado"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<string>("DireccionApoderado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("direccionApoderado");

                    b.Property<string>("EmailApoderado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailApoderado");

                    b.Property<int>("EstadoApoderado")
                        .HasColumnType("int")
                        .HasColumnName("estadoApoderado");

                    b.Property<DateTime>("FecCreacionApoderado")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionApoderado");

                    b.Property<string>("NombreApoderado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreApoderado");

                    b.Property<string>("NumeroDocumentoApoderado")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoApoderado");

                    b.Property<string>("TelefonoApoderado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("telefonoApoderado");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdApoderado")
                        .HasName("PK__BOFF_APO__D735979D9565A136");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("BOFF_APODERADOS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffAsociacionColorCliente", b =>
                {
                    b.Property<int>("IdAsociacionColorCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAsociacionColorCliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsociacionColorCliente"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("colorId");

                    b.Property<int>("CustomizaElementoId")
                        .HasColumnType("int")
                        .HasColumnName("customizaElementoId");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacion");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacion");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.HasKey("IdAsociacionColorCliente")
                        .HasName("PK__BOFF_ASO__A70CC7277294E1F8");

                    b.HasIndex("ColorId");

                    b.HasIndex("CustomizaElementoId");

                    b.ToTable("BOFF_ASOCIACION_COLOR_CLIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffCliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("DireccionCliente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("direccionCliente");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailCliente");

                    b.Property<int>("EstadoCliente")
                        .HasColumnType("int")
                        .HasColumnName("estadoCliente");

                    b.Property<DateTime>("FecCreacionCliente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionCliente");

                    b.Property<int>("LocacionId")
                        .HasColumnType("int")
                        .HasColumnName("locacionId");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreCliente");

                    b.Property<string>("NumeroDocumentoCliente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoCliente");

                    b.Property<string>("RutaLogoCliente")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("rutaLogoCliente");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.Property<int>("TipoPersonaId")
                        .HasColumnType("int")
                        .HasColumnName("tipoPersonaId");

                    b.HasKey("IdCliente")
                        .HasName("PK__BOFF_CLI__885457EE6860AC5D");

                    b.HasIndex("LocacionId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("TipoPersonaId");

                    b.ToTable("BOFF_CLIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffColore", b =>
                {
                    b.Property<int>("IdColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idColor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdColor"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<DateTime?>("FecActualizacionColor")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionColor");

                    b.Property<DateTime>("FecCreacionColor")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionColor");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("Primario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("primario");

                    b.Property<string>("Secundario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("secundario");

                    b.HasKey("IdColor")
                        .HasName("PK__BOFF_COL__504A3B8810CB4F85");

                    b.HasIndex("ClienteId");

                    b.ToTable("BOFF_COLORES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffConfigCliente", b =>
                {
                    b.Property<int>("IdConfigCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idConfigCliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConfigCliente"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<string>("CorrelativoConfigCliente")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("correlativoConfigCliente");

                    b.Property<int>("EstadoConfigcliente")
                        .HasColumnType("int")
                        .HasColumnName("estadoConfigcliente");

                    b.Property<DateTime>("FecCreacionConfigCliente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionConfigCliente");

                    b.Property<string>("PrefijoConfigCliente")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("prefijoConfigCliente");

                    b.HasKey("IdConfigCliente")
                        .HasName("PK__BOFF_CON__789329F06D4D5968");

                    b.HasIndex("ClienteId");

                    b.ToTable("BOFF_CONFIG_CLIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffCuenta", b =>
                {
                    b.Property<int>("IdCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCuenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCuenta"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<string>("CodIdentificacionCuenta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codIdentificacionCuenta");

                    b.Property<int>("EstadoCuenta")
                        .HasColumnType("int")
                        .HasColumnName("estadoCuenta");

                    b.Property<DateTime>("FecCreacionCuenta")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionCuenta");

                    b.Property<string>("NombreCuenta")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreCuenta");

                    b.HasKey("IdCuenta")
                        .HasName("PK__BOFF_CUE__BBC6DF326E210EFC");

                    b.HasIndex("ClienteId");

                    b.ToTable("BOFF_CUENTAS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffCuentasAgente", b =>
                {
                    b.Property<int>("IdCuentaAgente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCuentaAgente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCuentaAgente"));

                    b.Property<int>("CuentaId")
                        .HasColumnType("int")
                        .HasColumnName("cuentaId");

                    b.Property<string>("DireccionAgente")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("direccionAgente");

                    b.Property<string>("EmailAgente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailAgente");

                    b.Property<int>("EstadoAgente")
                        .HasColumnType("int")
                        .HasColumnName("estadoAgente");

                    b.Property<DateTime>("FecCreacionAgente")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionAgente");

                    b.Property<string>("NombreAgente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreAgente");

                    b.Property<string>("NumeroDocumentoAgente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoAgente");

                    b.Property<int>("PoderDemanda")
                        .HasColumnType("int")
                        .HasColumnName("poderDemanda");

                    b.Property<string>("TelefonoAgente")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefonoAgente");

                    b.Property<string>("TipoAgente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("tipoAgente");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdCuentaAgente")
                        .HasName("PK__BOFF_CUE__3833D224DD53C00F");

                    b.HasIndex("CuentaId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("BOFF_CUENTAS_AGENTE", (string)null);
                });

            modelBuilder.Entity("Domain.BoffEstadoProcesalDocumento", b =>
                {
                    b.Property<int>("IdEstadoProcesalDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEstadoProcesalDocumento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoProcesalDocumento"));

                    b.Property<int>("EstadoDocumento")
                        .HasColumnType("int")
                        .HasColumnName("estadoDocumento");

                    b.Property<int>("EstatusProcesoId")
                        .HasColumnType("int")
                        .HasColumnName("estatusProcesoId");

                    b.Property<DateTime?>("FecActulacionEntregaDocumento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActulacionEntregaDocumento");

                    b.Property<DateTime>("FecCreacionEstadoProcesalDocumento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionEstadoProcesalDocumento");

                    b.Property<int>("TipoExpDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoExpDocumentoId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdEstadoProcesalDocumento")
                        .HasName("PK__BOFF_EST__A8FC7B32E179CAA4");

                    b.HasIndex("EstatusProcesoId");

                    b.HasIndex("TipoExpDocumentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("BOFF_ESTADO_PROCESAL_DOCUMENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffHistContrasena", b =>
                {
                    b.Property<int>("IdHistContrasena")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistContrasena");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistContrasena"));

                    b.Property<DateTime>("FecFinContrasena")
                        .HasColumnType("date")
                        .HasColumnName("fecFinContrasena");

                    b.Property<DateTime>("FecIniContrasena")
                        .HasColumnType("date")
                        .HasColumnName("fecIniContrasena");

                    b.Property<string>("UsuarioContrasena")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("usuarioContrasena");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<int>("ValidacionId")
                        .HasColumnType("int")
                        .HasColumnName("validacionId");

                    b.HasKey("IdHistContrasena")
                        .HasName("PK__BOFF_HIS__F64B5534225010A8");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("ValidacionId");

                    b.ToTable("BOFF_HIST_CONTRASENAS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffHistSesionesActiva", b =>
                {
                    b.Property<int>("IdHistSesionActiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistSesionActiva");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistSesionActiva"));

                    b.Property<DateTime>("FecInicioHistSesion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioHistSesion");

                    b.Property<DateTime>("FecfinHistSesion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecfinHistSesion");

                    b.Property<int>("SesionActivaUsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("sesionActivaUsuarioId");

                    b.HasKey("IdHistSesionActiva")
                        .HasName("PK__BOFF_HIS__BBEC5BD445B0A8DE");

                    b.ToTable("BOFF_HIST_SESIONES_ACTIVAS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffHistSesionesErronea", b =>
                {
                    b.Property<int>("IdHistSesionErronea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idHistSesionErronea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistSesionErronea"));

                    b.Property<DateTime>("FecInicioHistSesion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioHistSesion");

                    b.Property<DateTime>("FecfinHistSesion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecfinHistSesion");

                    b.Property<int>("SesionErroneaUsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("sesionErroneaUsuarioId");

                    b.HasKey("IdHistSesionErronea")
                        .HasName("PK__BOFF_HIS__F331AC4D4FD18AA5");

                    b.ToTable("BOFF_HIST_SESIONES_ERRONEAS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffPerfilRole", b =>
                {
                    b.Property<int>("IdPerfilRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPerfilRol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerfilRol"));

                    b.Property<string>("Actor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("actor");

                    b.Property<string>("DescripcionPerfilRol")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcionPerfilRol");

                    b.Property<int>("EstadoPerfilRol")
                        .HasColumnType("int")
                        .HasColumnName("estadoPerfilRol");

                    b.Property<DateTime>("FecCreacionPerfilRol")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionPerfilRol");

                    b.Property<int?>("IdUsuarioAlta")
                        .HasColumnType("int")
                        .HasColumnName("idUsuarioAlta");

                    b.Property<int?>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfilId");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rolId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdPerfilRol")
                        .HasName("PK__BOFF_PER__FF59545BF1B08156");

                    b.HasIndex("PerfilId");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("BOFF_PERFIL_ROLES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffPerfile", b =>
                {
                    b.Property<int>("IdPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPerfil");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerfil"));

                    b.Property<string>("DescripcionPerfil")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionPerfil");

                    b.Property<int>("EstadoPerfil")
                        .HasColumnType("int")
                        .HasColumnName("estadoPerfil");

                    b.Property<DateTime?>("FecActualizacionPerfil")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionPerfil");

                    b.Property<DateTime>("FecCreacionPerfil")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionPerfil");

                    b.HasKey("IdPerfil")
                        .HasName("PK__BOFF_PER__40F13B608F16E885");

                    b.ToTable("BOFF_PERFILES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffPerfilesPermiso", b =>
                {
                    b.Property<int>("IdPerfilPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPerfilPermiso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerfilPermiso"));

                    b.Property<int>("EstadoPerfilPermiso")
                        .HasColumnType("int")
                        .HasColumnName("estadoPerfilPermiso");

                    b.Property<DateTime?>("FecActualizacionPerfilPermiso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionPerfilPermiso");

                    b.Property<DateTime>("FecCreacionPerfilPermiso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionPerfilPermiso");

                    b.Property<string>("FuncionPerfilPermiso")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("funcionPerfilPermiso");

                    b.Property<int>("ObjetoId")
                        .HasColumnType("int")
                        .HasColumnName("objetoId");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfilId");

                    b.Property<int>("PermisoId")
                        .HasColumnType("int")
                        .HasColumnName("permisoId");

                    b.Property<string>("UrlPerfilPermiso")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("urlPerfilPermiso");

                    b.HasKey("IdPerfilPermiso")
                        .HasName("PK__BOFF_PER__47153D95E992EB55");

                    b.HasIndex("ObjetoId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("PermisoId");

                    b.ToTable("BOFF_PERFILES_PERMISOS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffPermiso", b =>
                {
                    b.Property<int>("IdPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPermiso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermiso"));

                    b.Property<string>("DescripcionPermiso")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionPermiso");

                    b.Property<int>("EstadoPermiso")
                        .HasColumnType("int")
                        .HasColumnName("estadoPermiso");

                    b.Property<DateTime?>("FecActualizacionPermiso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionPermiso");

                    b.Property<DateTime>("FecCreacionPermiso")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionPermiso");

                    b.HasKey("IdPermiso")
                        .HasName("PK__BOFF_PER__06A5848641D0CE82");

                    b.ToTable("BOFF_PERMISOS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffRepresentante", b =>
                {
                    b.Property<int>("IdRepresentante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRepresentante");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRepresentante"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<string>("DireccionRepresentante")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("direccionRepresentante");

                    b.Property<string>("EmailRepresentante")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailRepresentante");

                    b.Property<int>("EstadoRepresentante")
                        .HasColumnType("int")
                        .HasColumnName("estadoRepresentante");

                    b.Property<DateTime>("FecCreacionRepresentante")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionRepresentante");

                    b.Property<string>("NombreRepresentante")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreRepresentante");

                    b.Property<string>("NumeroDocumentoRepresentante")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoRepresentante");

                    b.Property<string>("TelefonoRepresentante")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("telefonoRepresentante");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdRepresentante")
                        .HasName("PK__BOFF_REP__119773E3876662D1");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("BOFF_REPRESENTANTES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffRole", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("DescripcionRol")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionRol");

                    b.Property<int>("EstadoRol")
                        .HasColumnType("int")
                        .HasColumnName("estadoRol");

                    b.Property<DateTime?>("FecActualizacionRol")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionRol");

                    b.Property<DateTime>("FecCreacionRol")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionRol");

                    b.HasKey("IdRol")
                        .HasName("PK__BOFF_ROL__3C872F766444C158");

                    b.ToTable("BOFF_ROLES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffSesionesActiva", b =>
                {
                    b.Property<string>("CodigoVerifSesion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("codigoVerifSesion");

                    b.Property<DateTime>("FecCodigoVerifSesion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCodigoVerifSesion");

                    b.Property<DateTime>("FecInicioSesion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecInicioSesion");

                    b.Property<int>("FlagExitoSesion")
                        .HasColumnType("int")
                        .HasColumnName("flagExitoSesion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.Property<int>("ValidacionId")
                        .HasColumnType("int")
                        .HasColumnName("validacionId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("ValidacionId");

                    b.ToTable("BOFF_SESIONES_ACTIVAS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffSesionesErronea", b =>
                {
                    b.Property<DateTime>("FecSesionErronea")
                        .HasColumnType("datetime")
                        .HasColumnName("fecSesionErronea");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("BOFF_SESIONES_ERRONEAS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffSesionesObjeto", b =>
                {
                    b.Property<int>("IdSesionObjeto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSesionObjeto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSesionObjeto"));

                    b.Property<DateTime>("FecSesionObjeto")
                        .HasColumnType("datetime")
                        .HasColumnName("fecSesionObjeto");

                    b.Property<int>("ObjetoId")
                        .HasColumnType("int")
                        .HasColumnName("objetoId");

                    b.Property<int>("SesionId")
                        .HasColumnType("int")
                        .HasColumnName("sesionId");

                    b.HasKey("IdSesionObjeto")
                        .HasName("PK__BOFF_SES__04AAA2544A2A7157");

                    b.HasIndex("ObjetoId");

                    b.ToTable("BOFF_SESIONES_OBJETOS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffTipoBitacora", b =>
                {
                    b.Property<int>("IdTipoBitacora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoBitacora");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoBitacora"));

                    b.Property<string>("CodigoBitacora")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("codigoBitacora")
                        .IsFixedLength();

                    b.Property<bool?>("ControlWeb")
                        .HasColumnType("bit")
                        .HasColumnName("controlWeb");

                    b.Property<int>("EstadoBitacora")
                        .HasColumnType("int")
                        .HasColumnName("estadoBitacora");

                    b.Property<DateTime?>("FecActualizacionBitacora")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionBitacora");

                    b.Property<DateTime>("FecCreacionBitacora")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionBitacora");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreBitacora")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreBitacora");

                    b.HasKey("IdTipoBitacora")
                        .HasName("PK__BOFF_TIP__D4B6FAF82C245321");

                    b.ToTable("BOFF_TIPO_BITACORA", (string)null);
                });

            modelBuilder.Entity("Domain.BoffTipoEtapaMedidaCautelar", b =>
                {
                    b.Property<int>("IdTipoEtapaMedidaCautelar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoEtapaMedidaCautelar");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoEtapaMedidaCautelar"));

                    b.Property<int>("EstadoTipoEtapaMedidaCautelar")
                        .HasColumnType("int")
                        .HasColumnName("estadoTipoEtapaMedidaCautelar");

                    b.Property<DateTime?>("FecActualizacionTipoEtapaMedidaCautelar")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionTipoEtapaMedidaCautelar");

                    b.Property<DateTime>("FecCreacionTipoEtapaMedidaCautelar")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTipoEtapaMedidaCautelar");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreTipoEtapaMedidaCautelar")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreTipoEtapaMedidaCautelar");

                    b.Property<int?>("NroOrdenEtapaMedidaCautelar")
                        .HasColumnType("int")
                        .HasColumnName("nroOrdenEtapaMedidaCautelar");

                    b.HasKey("IdTipoEtapaMedidaCautelar")
                        .HasName("PK__BOFF_TIP__AFDF208CB5D595D5");

                    b.ToTable("BOFF_TIPO_ETAPA_MEDIDA_CAUTELAR", (string)null);
                });

            modelBuilder.Entity("Domain.BoffTipoMedidasCautelare", b =>
                {
                    b.Property<int>("IdTipoMedidaCautelar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoMedidaCautelar");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoMedidaCautelar"));

                    b.Property<string>("DescripcionTipoMedidaCautelar")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descripcionTipoMedidaCautelar");

                    b.Property<int>("EstadoTipoMedidaCautelar")
                        .HasColumnType("int")
                        .HasColumnName("estadoTipoMedidaCautelar");

                    b.Property<DateTime?>("FecActualizacionTipoMedidaCautelar")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionTipoMedidaCautelar");

                    b.Property<DateTime>("FecCreacionTipoMedidaCautelar")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTipoMedidaCautelar");

                    b.HasKey("IdTipoMedidaCautelar")
                        .HasName("PK__BOFF_TIP__8FD696B62D6C34B7");

                    b.ToTable("BOFF_TIPO_MEDIDAS_CAUTELARES", (string)null);
                });

            modelBuilder.Entity("Domain.BoffTipoSubetapaMedidaCautelar", b =>
                {
                    b.Property<int>("IdTipoSubetapaMedidaCautelar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoSubetapaMedidaCautelar");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoSubetapaMedidaCautelar"));

                    b.Property<int>("EstadoSubetapaMedidaCautelar")
                        .HasColumnType("int")
                        .HasColumnName("estadoSubetapaMedidaCautelar");

                    b.Property<DateTime?>("FecActualizacionSubetapaMedidaCautelar")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionSubetapaMedidaCautelar");

                    b.Property<DateTime>("FecCreacionSubetapaMedidaCautelar")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionSubetapaMedidaCautelar");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<string>("NombreSubetapaMedidaCautelar")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreSubetapaMedidaCautelar");

                    b.Property<int>("NroOrdenSubetapaMedidaCautelar")
                        .HasColumnType("int")
                        .HasColumnName("nroOrdenSubetapaMedidaCautelar");

                    b.Property<int>("TipoEtapaMedidaCautelarId")
                        .HasColumnType("int")
                        .HasColumnName("tipoEtapaMedidaCautelarId");

                    b.HasKey("IdTipoSubetapaMedidaCautelar")
                        .HasName("PK__BOFF_TIP__4920BBA3F92F582E");

                    b.HasIndex("TipoEtapaMedidaCautelarId");

                    b.ToTable("BOFF_TIPO_SUBETAPA_MEDIDA_CAUTELAR", (string)null);
                });

            modelBuilder.Entity("Domain.BoffUsuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("ApellidosUsuario")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("apellidosUsuario");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<string>("ContrasenaUsuario")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("contrasenaUsuario");

                    b.Property<string>("DescripcionEstadoUsuario")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionEstadoUsuario");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailUsuario");

                    b.Property<int>("EstadoContrasenaUsuario")
                        .HasColumnType("int")
                        .HasColumnName("estadoContrasenaUsuario");

                    b.Property<int>("EstadoUsuario")
                        .HasColumnType("int")
                        .HasColumnName("estadoUsuario");

                    b.Property<DateTime>("FecAltaUsuario")
                        .HasColumnType("datetime")
                        .HasColumnName("fecAltaUsuario");

                    b.Property<DateTime?>("FecBajaUsuario")
                        .HasColumnType("datetime")
                        .HasColumnName("fecBajaUsuario");

                    b.Property<DateTime>("FecFinContrasenaUsuario")
                        .HasColumnType("datetime")
                        .HasColumnName("fecFinContrasenaUsuario");

                    b.Property<string>("LoginUsuario")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("loginUsuario");

                    b.Property<string>("NombresUsuario")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombresUsuario");

                    b.Property<string>("NumeroDocumentoUsuario")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoUsuario");

                    b.Property<int>("RespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("respuestaId");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rolId");

                    b.Property<string>("TelefonoUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefonoUsuario");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.Property<bool>("VerificarCorreo")
                        .HasColumnType("bit")
                        .HasColumnName("verificarCorreo");

                    b.HasKey("IdUsuario")
                        .HasName("PK__BOFF_USU__645723A6BC285E6B");

                    b.HasIndex("ClienteId");

                    b.HasIndex("RespuestaId");

                    b.HasIndex("RolId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("BOFF_USUARIOS", (string)null);
                });

            modelBuilder.Entity("Domain.BoffUsuarioCuenta", b =>
                {
                    b.Property<int>("IdUsuarioCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUsuarioCuenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuarioCuenta"));

                    b.Property<int>("CuentaId")
                        .HasColumnType("int")
                        .HasColumnName("cuentaId");

                    b.Property<int>("EstadoUsuarioCuenta")
                        .HasColumnType("int")
                        .HasColumnName("estadoUsuarioCuenta");

                    b.Property<int>("IdUsuarioCreador")
                        .HasColumnType("int")
                        .HasColumnName("idUsuarioCreador");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("IdUsuarioCuenta")
                        .HasName("PK__BOFF_USU__3127B6D2C80DCED8");

                    b.HasIndex("CuentaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("BOFF_USUARIO_CUENTAS", (string)null);
                });

            modelBuilder.Entity("Domain.GbotBot", b =>
                {
                    b.Property<int>("IdBot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBot");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBot"));

                    b.Property<string>("CodigoBot")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("codigoBot");

                    b.Property<string>("NombreBot")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreBot");

                    b.Property<int>("ProcesoBotId")
                        .HasColumnType("int")
                        .HasColumnName("procesoBotId");

                    b.Property<int>("TipoAmbienteId")
                        .HasColumnType("int")
                        .HasColumnName("tipoAmbienteId");

                    b.HasKey("IdBot")
                        .HasName("PK__GBOT_BOT__383960253D6A4C3E");

                    b.HasIndex("ProcesoBotId");

                    b.HasIndex("TipoAmbienteId");

                    b.ToTable("GBOT_BOTS", (string)null);
                });

            modelBuilder.Entity("Domain.GbotHistGestionBot", b =>
                {
                    b.Property<int>("IdGestBot")
                        .HasColumnType("int")
                        .HasColumnName("idGestBot");

                    b.Property<int>("BotId")
                        .HasColumnType("int")
                        .HasColumnName("botId");

                    b.Property<DateTime>("FecGestBot")
                        .HasColumnType("datetime")
                        .HasColumnName("fecGestBot");

                    b.Property<string>("NumeroDocumentoAuxGestBot")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoAuxGestBot");

                    b.Property<string>("NumeroDocumentoGestBot")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoGestBot");

                    b.Property<int>("ObjetoId")
                        .HasColumnType("int")
                        .HasColumnName("objetoId");

                    b.Property<string>("TipoDocumentoAuxGestBot")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tipoDocumentoAuxGestBot");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdGestBot")
                        .HasName("PK__GBOT_HIS__9D7964CD03619914");

                    b.HasIndex("BotId");

                    b.HasIndex("ObjetoId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("GBOT_HIST_GESTION_BOTS", (string)null);
                });

            modelBuilder.Entity("Domain.GbotHistLogBot", b =>
                {
                    b.Property<int>("IdLogBot")
                        .HasColumnType("int")
                        .HasColumnName("idLogBot");

                    b.Property<int>("BotId")
                        .HasColumnType("int")
                        .HasColumnName("botId");

                    b.Property<DateTime>("FecLogBot")
                        .HasColumnType("datetime")
                        .HasColumnName("fecLogBot");

                    b.Property<int?>("FlagBarrido")
                        .HasColumnType("int")
                        .HasColumnName("flagBarrido");

                    b.Property<int>("LogCategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("logCategoriaId");

                    b.Property<int>("LogEventoId")
                        .HasColumnType("int")
                        .HasColumnName("logEventoId");

                    b.Property<int>("LogFuenteId")
                        .HasColumnType("int")
                        .HasColumnName("logFuenteId");

                    b.Property<int>("LogInteraccionId")
                        .HasColumnType("int")
                        .HasColumnName("logInteraccionId");

                    b.Property<string>("Mensaje")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("mensaje");

                    b.Property<string>("NumeroDocumentoAuxLogBot")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoAuxLogBot");

                    b.Property<string>("NumeroDocumentoLogBot")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numeroDocumentoLogBot");

                    b.Property<string>("TipoDocumentoAuxLogBot")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tipoDocumentoAuxLogBot");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoDocumentoId");

                    b.HasKey("IdLogBot")
                        .HasName("PK__GBOT_HIS__2E2BA02A3EAE9F2A");

                    b.HasIndex("BotId");

                    b.HasIndex("LogCategoriaId");

                    b.HasIndex("LogEventoId");

                    b.HasIndex("LogInteraccionId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("GBOT_HIST_LOG_BOTS", (string)null);
                });

            modelBuilder.Entity("Domain.GbotLogCategoria", b =>
                {
                    b.Property<int>("IdLogCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLogCategoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogCategoria"));

                    b.Property<string>("NombreLogCategoria")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreLogCategoria");

                    b.HasKey("IdLogCategoria")
                        .HasName("PK__GBOT_LOG__869C228EC2872207");

                    b.ToTable("GBOT_LOG_CATEGORIAS", (string)null);
                });

            modelBuilder.Entity("Domain.GbotLogEvento", b =>
                {
                    b.Property<int>("IdLogEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLogEvento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogEvento"));

                    b.Property<string>("NombreLogEvento")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombreLogEvento");

                    b.HasKey("IdLogEvento")
                        .HasName("PK__GBOT_LOG__45215E7B2FEAD496");

                    b.ToTable("GBOT_LOG_EVENTOS", (string)null);
                });

            modelBuilder.Entity("Domain.GbotLogFuente", b =>
                {
                    b.Property<int>("IdLogFuentes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLogFuentes");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogFuentes"));

                    b.Property<string>("NombreLogFuentes")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreLogFuentes");

                    b.HasKey("IdLogFuentes")
                        .HasName("PK__GBOT_LOG__18D45F923F362261");

                    b.ToTable("GBOT_LOG_FUENTES", (string)null);
                });

            modelBuilder.Entity("Domain.GbotLogInteraccione", b =>
                {
                    b.Property<int>("IdLogInteraccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLogInteraccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogInteraccion"));

                    b.Property<string>("NombreLogInteraccion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreLogInteraccion");

                    b.HasKey("IdLogInteraccion")
                        .HasName("PK__GBOT_LOG__05C411ACB220EBC3");

                    b.ToTable("GBOT_LOG_INTERACCIONES", (string)null);
                });

            modelBuilder.Entity("Domain.GbotProcesosBot", b =>
                {
                    b.Property<int>("IdProcesoBot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProcesoBot");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcesoBot"));

                    b.Property<string>("NombreProcesoBot")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombreProcesoBot");

                    b.HasKey("IdProcesoBot")
                        .HasName("PK__GBOT_PRO__EF60F4E84954BBB3");

                    b.ToTable("GBOT_PROCESOS_BOTS", (string)null);
                });

            modelBuilder.Entity("Domain.GibdAuditoriaTabla", b =>
                {
                    b.Property<int>("IdAuditoriaTabla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAuditoriaTabla");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuditoriaTabla"));

                    b.Property<string>("DescripcionAuditoriaTabla")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descripcionAuditoriaTabla");

                    b.Property<DateTime>("FecAuditoriaTabla")
                        .HasColumnType("datetime")
                        .HasColumnName("fecAuditoriaTabla");

                    b.Property<int>("TablaId")
                        .HasColumnType("int")
                        .HasColumnName("tablaId");

                    b.HasKey("IdAuditoriaTabla")
                        .HasName("PK__GIBD_AUD__7616020EFEA9F17A");

                    b.HasIndex("TablaId");

                    b.ToTable("GIBD_AUDITORIA_TABLAS", (string)null);
                });

            modelBuilder.Entity("Domain.GibdProcesosTabla", b =>
                {
                    b.Property<int>("IdProceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProceso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProceso"));

                    b.Property<int?>("EstadoProceso")
                        .HasColumnType("int")
                        .HasColumnName("estadoProceso");

                    b.Property<string>("NombreProceso")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreProceso");

                    b.Property<string>("PrefijoProceso")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("prefijoProceso");

                    b.HasKey("IdProceso")
                        .HasName("PK__GIBD_PRO__DEC8292695F896B8");

                    b.ToTable("GIBD_PROCESOS_TABLAS", (string)null);
                });

            modelBuilder.Entity("Domain.GibdTabla", b =>
                {
                    b.Property<int>("IdTabla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTabla");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTabla"));

                    b.Property<DateTime?>("FecActualizacionTabla")
                        .HasColumnType("datetime")
                        .HasColumnName("fecActualizacionTabla");

                    b.Property<DateTime?>("FecCreacionTabla")
                        .HasColumnType("datetime")
                        .HasColumnName("fecCreacionTabla");

                    b.Property<string>("NombreTabla")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreTabla");

                    b.Property<int>("ProcesoId")
                        .HasColumnType("int")
                        .HasColumnName("procesoId");

                    b.Property<int>("TipoAmbienteId")
                        .HasColumnType("int")
                        .HasColumnName("tipoAmbienteId");

                    b.HasKey("IdTabla")
                        .HasName("PK__GIBD_TAB__716BDE20DB284C34");

                    b.HasIndex("ProcesoId");

                    b.HasIndex("TipoAmbienteId");

                    b.ToTable("GIBD_TABLAS", (string)null);
                });

            modelBuilder.Entity("Domain.GibdTipoAmbiente", b =>
                {
                    b.Property<int>("IdTipoAmbiente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoAmbiente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoAmbiente"));

                    b.Property<string>("NombreAmbiente")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nombreAmbiente");

                    b.HasKey("IdTipoAmbiente")
                        .HasName("PK__GIBD_TIP__AE5ECEDBB873144F");

                    b.ToTable("GIBD_TIPO_AMBIENTES", (string)null);
                });

            modelBuilder.Entity("Domain.InvbTipoInmueble", b =>
                {
                    b.Property<int>("IdTipoInmueble")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoInmueble");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoInmueble"));

                    b.Property<string>("DescripcionTipoInmueble")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descripcionTipoInmueble");

                    b.HasKey("IdTipoInmueble")
                        .HasName("PK__INVB_TIP__73A1AD1514FE7C9F");

                    b.ToTable("INVB_TIPO_INMUEBLES", (string)null);
                });

            modelBuilder.Entity("Domain.ApliAbogado", b =>
                {
                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("ApliAbogados")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_ABOGADO_USUARIOS_idUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.ApliActuacionesExpediente", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliActuacionesExpedientes")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_ACTUACION_EXPEDIENTES_EXPEDIENTE_idExpediente");

                    b.HasOne("Domain.ApliSubetapa", "SubEtapa")
                        .WithMany("ApliActuacionesExpedientes")
                        .HasForeignKey("SubEtapaId")
                        .HasConstraintName("FK_ACTUACION_EXPEDIENTES_SUBETAPA_idSubEtapa");

                    b.Navigation("Expediente");

                    b.Navigation("SubEtapa");
                });

            modelBuilder.Entity("Domain.ApliAsignacione", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliAsignaciones")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_ASIGNACIONES_EXPEDIENTE_idExpediente");

                    b.HasOne("Domain.ApliTipoAsignacione", "TipoAsignacion")
                        .WithMany("ApliAsignaciones")
                        .HasForeignKey("TipoAsignacionId")
                        .IsRequired()
                        .HasConstraintName("FK_ASIGNACIONES_TIPOASIGNACION_idTipoAsignacion");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("ApliAsignaciones")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_ASIGNACIONES_USUARIOS_idUsuario");

                    b.Navigation("Expediente");

                    b.Navigation("TipoAsignacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.ApliDemandado", b =>
                {
                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("ApliDemandados")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_DEMANDADO_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.ApliDemandante", b =>
                {
                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("ApliDemandantes")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_DEMANDANTE_TIPODOCUMENTO_idTipoDocumento");

                    b.HasOne("Domain.ApliTipoPersona", "TipoPersona")
                        .WithMany("ApliDemandantes")
                        .HasForeignKey("TipoPersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_DEMANDANTE_TIPOPERSONA_idTipoPersona");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.ApliDetalleExpedienteEvento", b =>
                {
                    b.HasOne("Domain.ApliEvento", "Evento")
                        .WithMany("ApliDetalleExpedienteEventos")
                        .HasForeignKey("EventoId")
                        .IsRequired()
                        .HasConstraintName("FK_EXPEDIENTEEVENTO_EVENTO_idEvento");

                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliDetalleExpedienteEventos")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_EXPEDIENTEEVENTO_ASICEXPEDIENTE_idExpediente");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("ApliDetalleExpedienteEventos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_EXPEDIENTEEVENTO_USUARIO_idUsuario");

                    b.Navigation("Evento");

                    b.Navigation("Expediente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.ApliDirectorio", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("ApliDirectorios")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_DIRECTORIOS_CLIENTES_idCliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.ApliEstadoProcesal", b =>
                {
                    b.HasOne("Domain.ApliTipoEtapa", "TipoEtapa")
                        .WithMany("ApliEstadoProcesals")
                        .HasForeignKey("TipoEtapaId")
                        .IsRequired()
                        .HasConstraintName("FK_ESTADO_TIPOETAPA_idTipoEtapa");

                    b.Navigation("TipoEtapa");
                });

            modelBuilder.Entity("Domain.ApliEstatusProceso", b =>
                {
                    b.HasOne("Domain.ApliEstadoProcesal", "EstadoProcesal")
                        .WithMany("ApliEstatusProcesos")
                        .HasForeignKey("EstadoProcesalId")
                        .IsRequired()
                        .HasConstraintName("FK_PROCESOS_ESTADOS_idEstadoProcesal");

                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliEstatusProcesos")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_PROCESOS_EXPEDIENTE_idExpediente");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("ApliEstatusProcesos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_PROCESOS_USUARIO_idUsuario");

                    b.Navigation("EstadoProcesal");

                    b.Navigation("Expediente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.ApliEvento", b =>
                {
                    b.HasOne("Domain.ApliTipoEvento", "TipoEvento")
                        .WithMany("ApliEventos")
                        .HasForeignKey("TipoEventoId")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTO_TIPOEVENTO_idTipoEvento");

                    b.Navigation("TipoEvento");
                });

            modelBuilder.Entity("Domain.ApliExpDocumento", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliExpDocumentos")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_DOCUMENTO_EXPEDIENTES_idExpediente");

                    b.HasOne("Domain.BendTipoExpDocumento", "TipoExpDocumento")
                        .WithMany("ApliExpDocumentos")
                        .HasForeignKey("TipoExpDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_DOCUMENTO_TIPOEXPDOCUMENTOS_idTipoExpDocumento");

                    b.Navigation("Expediente");

                    b.Navigation("TipoExpDocumento");
                });

            modelBuilder.Entity("Domain.ApliExpedienteBitacora", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany()
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_EXPEDIENTE_BITACORA_idExpediente");

                    b.HasOne("Domain.BoffTipoBitacora", "TipoBitacora")
                        .WithMany()
                        .HasForeignKey("TipoBitacoraId")
                        .IsRequired()
                        .HasConstraintName("FK_TIPOBITACORA_BITACORA_idTipoBitacora");

                    b.Navigation("Expediente");

                    b.Navigation("TipoBitacora");
                });

            modelBuilder.Entity("Domain.ApliJuzgado", b =>
                {
                    b.HasOne("Domain.ApliLocacionJuzgado", "LocacionJuzgado")
                        .WithMany("ApliJuzgados")
                        .HasForeignKey("LocacionJuzgadoId")
                        .IsRequired()
                        .HasConstraintName("FK_LOCACION_JUZGADOS_idLocacionJuzgado");

                    b.Navigation("LocacionJuzgado");
                });

            modelBuilder.Entity("Domain.ApliJuzgadoExpediente", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliJuzgadoExpedientes")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_JUZGADO_EXPEDIENTE_idExpediente");

                    b.HasOne("Domain.ApliJuzgado", "Juzgado")
                        .WithMany("ApliJuzgadoExpedientes")
                        .HasForeignKey("JuzgadoId")
                        .IsRequired()
                        .HasConstraintName("FK_JUZGADO_EXPEDIENTE_idJuzgado");

                    b.Navigation("Expediente");

                    b.Navigation("Juzgado");
                });

            modelBuilder.Entity("Domain.ApliLocacionJuzgado", b =>
                {
                    b.HasOne("Domain.ApliSubtipoJuzgado", "SubtipoJuzgado")
                        .WithMany("ApliLocacionJuzgados")
                        .HasForeignKey("SubtipoJuzgadoId")
                        .HasConstraintName("FK_LOCACION_SUBTIPO_JUZGADOS_idTipoJuzgado");

                    b.Navigation("SubtipoJuzgado");
                });

            modelBuilder.Entity("Domain.ApliLocacione", b =>
                {
                    b.HasOne("Domain.AsicSede", "Sede")
                        .WithMany("ApliLocaciones")
                        .HasForeignKey("SedeId")
                        .IsRequired()
                        .HasConstraintName("FK_LOCACIONES_SEDES_idSede");

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("Domain.ApliMedidaCautelarExpediente", b =>
                {
                    b.HasOne("Domain.ApliDemandado", "Demandado")
                        .WithMany("ApliMedidaCautelarExpedientes")
                        .HasForeignKey("DemandadoId")
                        .IsRequired()
                        .HasConstraintName("FK_MEDIDACAUTELAR_DEMANDADO_idDemandado");

                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliMedidaCautelarExpedientes")
                        .HasForeignKey("ExpedienteId")
                        .HasConstraintName("FK_MEDIDACAUTELAR_EXPEDIENTE_idExpediente");

                    b.HasOne("Domain.BoffTipoMedidasCautelare", "TipoMedidaCautelar")
                        .WithMany("ApliMedidaCautelarExpedientes")
                        .HasForeignKey("TipoMedidaCautelarId")
                        .HasConstraintName("FK_TIPO_MEDIDACAUTELAR_EXPEDIENTE_idTipoMedidaCautelar");

                    b.HasOne("Domain.BoffTipoSubetapaMedidaCautelar", "TipoSubetapaMedidaCautelar")
                        .WithMany("ApliMedidaCautelarExpedientes")
                        .HasForeignKey("TipoSubetapaMedidaCautelarId")
                        .HasConstraintName("FK_SUBETAPA_MEDIDACAUTELAR_EXPEDIENTE_idTipoSubetapaMedidaCautelar");

                    b.Navigation("Demandado");

                    b.Navigation("Expediente");

                    b.Navigation("TipoMedidaCautelar");

                    b.Navigation("TipoSubetapaMedidaCautelar");
                });

            modelBuilder.Entity("Domain.ApliPagare", b =>
                {
                    b.HasOne("Domain.ApliTipoPagare", "TipoPagare")
                        .WithMany("ApliPagares")
                        .HasForeignKey("TipoPagareId")
                        .IsRequired()
                        .HasConstraintName("FK_PAGARES_TIPOPAGARES_idTipoPagare");

                    b.Navigation("TipoPagare");
                });

            modelBuilder.Entity("Domain.ApliPagaresExpediente", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("ApliPagaresExpedientes")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FL_PAGARE_EXPEDIENTE_idExpediente");

                    b.HasOne("Domain.ApliPagare", "Pagare")
                        .WithMany("ApliPagaresExpedientes")
                        .HasForeignKey("PagareId")
                        .IsRequired()
                        .HasConstraintName("FK_PAGARE_EXPEDIENTE_idPagare");

                    b.Navigation("Expediente");

                    b.Navigation("Pagare");
                });

            modelBuilder.Entity("Domain.ApliSubetapa", b =>
                {
                    b.HasOne("Domain.ApliTipoEtapa", "TipoEtapa")
                        .WithMany("ApliSubetapas")
                        .HasForeignKey("TipoEtapaId")
                        .IsRequired()
                        .HasConstraintName("FK_SUBETAPA_TIPOETAPA_idTipoEtapa");

                    b.Navigation("TipoEtapa");
                });

            modelBuilder.Entity("Domain.ApliSubtipoJuzgado", b =>
                {
                    b.HasOne("Domain.ApliTipoJuzgado", "TipoJuzgado")
                        .WithMany("ApliSubtipoJuzgados")
                        .HasForeignKey("TipoJuzgadoId")
                        .IsRequired()
                        .HasConstraintName("FK_TIPO_SUBTIPO_JUZGADOS_idTipoJuzgado");

                    b.Navigation("TipoJuzgado");
                });

            modelBuilder.Entity("Domain.ApliTipoDocumento", b =>
                {
                    b.HasOne("Domain.ApliTipoPersona", "TipoPersona")
                        .WithMany("ApliTipoDocumentos")
                        .HasForeignKey("TipoPersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_TIPODOCUMENTO_TIPOPERSONA_idTipoPersona");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.ApliTipoEtapa", b =>
                {
                    b.HasOne("Domain.ApliTipoProceso", "TipoProceso")
                        .WithMany("ApliTipoEtapas")
                        .HasForeignKey("TipoProcesoId")
                        .IsRequired()
                        .HasConstraintName("FK_TIPOPROCESO_TIPOETAPA_idTipoProceso");

                    b.Navigation("TipoProceso");
                });

            modelBuilder.Entity("Domain.ApliVencimientoContraseniasCliente", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("ApliVencimientoContraseniasClientes")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_VENCIMIENTO_CLIENTES_idCliente");

                    b.HasOne("Domain.ApliVencimientoContrasenia", "VencimientoContrasenia")
                        .WithMany("ApliVencimientoContraseniasClientes")
                        .HasForeignKey("VencimientoContraseniaId")
                        .IsRequired()
                        .HasConstraintName("FK_VENCIMIENTO_CONTRASENIA_idVencimientoContrasenia");

                    b.Navigation("Cliente");

                    b.Navigation("VencimientoContrasenia");
                });

            modelBuilder.Entity("Domain.AsicExpediente", b =>
                {
                    b.HasOne("Domain.ApliAbogado", "Abogado")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("AbogadoId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_ABOGADOS_idAbogado");

                    b.HasOne("Domain.BoffApoderado", "Apoderado")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("ApoderadoId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_APODERADO_idApoderado");

                    b.HasOne("Domain.AsicMasivaCabecera", "Cabecera")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("CabeceraId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_CABECERA_idCabecera");

                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_CLIENTE_idCliente");

                    b.HasOne("Domain.BoffCuenta", "Cuenta")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("CuentaId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_CUENTAS_idCuenta");

                    b.HasOne("Domain.ApliDemandado", "Demandado")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("DemandadoId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_DEMANDADO_idDemandado");

                    b.HasOne("Domain.ApliDemandante", "Demandante")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("DemandanteId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_DEMANDANTES_idDemandante");

                    b.HasOne("Domain.ApliEstadoProcesal", "EstadoProcesal")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("EstadoProcesalId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_ESTADOS_idEstadoProcesal");

                    b.HasOne("Domain.BoffRepresentante", "Representante")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("RepresentanteId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_REPRESENTANTE_idRepresentante");

                    b.HasOne("Domain.AsicSede", "Sede")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("SedeId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_SEDES_idSede");

                    b.HasOne("Domain.ApliSubetapa", "SubEtapa")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("SubEtapaId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_SUBETAPA_idSubEtapa");

                    b.HasOne("Domain.ApliTipoProceso", "TipoProceso")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("TipoProcesoId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_TIPOPROCESO_idTipoProceso");

                    b.HasOne("Domain.ApliTipoCuantia", "Tipocuantia")
                        .WithMany("AsicExpedientes")
                        .HasForeignKey("TipocuantiaId")
                        .HasConstraintName("FK_ASICEXPEDIENTE_TIPOCUANTIAS_idTipoCuantia");

                    b.Navigation("Abogado");

                    b.Navigation("Apoderado");

                    b.Navigation("Cabecera");

                    b.Navigation("Cliente");

                    b.Navigation("Cuenta");

                    b.Navigation("Demandado");

                    b.Navigation("Demandante");

                    b.Navigation("EstadoProcesal");

                    b.Navigation("Representante");

                    b.Navigation("Sede");

                    b.Navigation("SubEtapa");

                    b.Navigation("TipoProceso");

                    b.Navigation("Tipocuantia");
                });

            modelBuilder.Entity("Domain.AsicExpedienteCargaErrore", b =>
                {
                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("AsicExpedienteCargaErrores")
                        .HasForeignKey("ExpedienteId")
                        .IsRequired()
                        .HasConstraintName("FK_EXPEDIENTE_CARGA_ERRORES_EXPEDIENTE_idExpediente");

                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Domain.AsicMasivaCabecera", b =>
                {
                    b.HasOne("Domain.AsicMasivaLote", "Lote")
                        .WithMany("AsicMasivaCabeceras")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_ASICCABECERA_LOTE_idLote");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("Domain.AsicMasivaLote", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("AsicMasivaLotes")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_ASICLOTE_CLIENTES_idCliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.AsicMasivaLoteCargaErrore", b =>
                {
                    b.HasOne("Domain.AsicMasivaLote", "Lote")
                        .WithMany("AsicMasivaLoteCargaErrores")
                        .HasForeignKey("LoteId")
                        .IsRequired()
                        .HasConstraintName("FK_LOTE_CARGA_ERRORES_LOTES_idLote");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("Domain.BendCampoCliente", b =>
                {
                    b.HasOne("Domain.BendPlantillaCampo", "Campo")
                        .WithMany("BendCampoClientes")
                        .HasForeignKey("CampoId")
                        .IsRequired()
                        .HasConstraintName("FK_CAMPO_CLIENTES_PLANTILLACAMPOS_idCampo");

                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BendCampoClientes")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_CAMPO_CLIENTES_PLANTILLACAMPOS_idcliente");

                    b.Navigation("Campo");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.BendDeceval", b =>
                {
                    b.HasOne("Domain.BoffCuenta", "Cuenta")
                        .WithMany("BendDecevals")
                        .HasForeignKey("CuentaId")
                        .HasConstraintName("FK__CUENTA_DEUDORDECEVALL_idCuenta");

                    b.HasOne("Domain.BendDeudorDeceval", "DeudorDeceval")
                        .WithMany("BendDecevals")
                        .HasForeignKey("DeudorDecevalId")
                        .HasConstraintName("FK_DEUDORDECEVAL_DECEVAL_idDeudorDeceval");

                    b.HasOne("Domain.AsicSede", "Sede")
                        .WithMany("BendDecevals")
                        .HasForeignKey("SedeId")
                        .HasConstraintName("FK__SEDE_DEUDORDECEVALL_idSede");

                    b.Navigation("Cuenta");

                    b.Navigation("DeudorDeceval");

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("Domain.BendDeudorBien", b =>
                {
                    b.HasOne("Domain.BendDeudore", "Deudor")
                        .WithMany("BendDeudorBiens")
                        .HasForeignKey("DeudorId")
                        .IsRequired()
                        .HasConstraintName("FK_BIEN_DETALLES_DEUDOR_idDeudor");

                    b.Navigation("Deudor");
                });

            modelBuilder.Entity("Domain.BendDeudorDeceval", b =>
                {
                    b.HasOne("Domain.BendDeudore", "Deudor")
                        .WithMany("BendDeudorDecevals")
                        .HasForeignKey("DeudorId")
                        .HasConstraintName("FK_DEUDORDECEVAL_DEUDOR_idDeudor");

                    b.HasOne("Domain.AsicExpediente", "Expediente")
                        .WithMany("BendDeudorDecevals")
                        .HasForeignKey("ExpedienteId")
                        .HasConstraintName("FK_DEUDORDECEVAL_ASICEXPEDIENTE_idExpediente");

                    b.Navigation("Deudor");

                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Domain.BendDeudorRamaJudicial", b =>
                {
                    b.HasOne("Domain.BendDeudore", "Deudor")
                        .WithMany("BendDeudorRamaJudicials")
                        .HasForeignKey("DeudorId")
                        .HasConstraintName("FK_RAMA_JUDICIAL_DEUDOR_idDeudor");

                    b.Navigation("Deudor");
                });

            modelBuilder.Entity("Domain.BendDeudorSalario", b =>
                {
                    b.HasOne("Domain.BendDeudore", "Deudor")
                        .WithMany("BendDeudorSalarios")
                        .HasForeignKey("DeudorId")
                        .IsRequired()
                        .HasConstraintName("FK_SALARIO_DETALLE_DEUDOR_idDeudor");

                    b.Navigation("Deudor");
                });

            modelBuilder.Entity("Domain.BendDeudorVehiculo", b =>
                {
                    b.HasOne("Domain.BendDeudore", "Deudor")
                        .WithMany("BendDeudorVehiculos")
                        .HasForeignKey("DeudorId")
                        .IsRequired()
                        .HasConstraintName("FK_VEHICULO_DETALLES_DEUDOR_idDeudor");

                    b.Navigation("Deudor");
                });

            modelBuilder.Entity("Domain.BendDeudore", b =>
                {
                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BendDeudores")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_DEUDORES_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.BendEstadoElectronicosRj", b =>
                {
                    b.HasOne("Domain.ApliJuzgado", "Juzgado")
                        .WithMany("BendEstadoElectronicosRjs")
                        .HasForeignKey("JuzgadoId")
                        .HasConstraintName("FK__ELECTRONICOS_JUZGADOS_idJuzgado");

                    b.Navigation("Juzgado");
                });

            modelBuilder.Entity("Domain.BendHistBusqBienesDetalle", b =>
                {
                    b.HasOne("Domain.BendDeudorBien", "DeudorBien")
                        .WithMany("BendHistBusqBienesDetalles")
                        .HasForeignKey("DeudorBienId")
                        .IsRequired()
                        .HasConstraintName("FK_BIEN_BUSQBIEN_idDeudorBien");

                    b.Navigation("DeudorBien");
                });

            modelBuilder.Entity("Domain.BendHistBusqSalariosDetalle", b =>
                {
                    b.HasOne("Domain.BendDeudorSalario", "DeudorSalario")
                        .WithMany("BendHistBusqSalariosDetalles")
                        .HasForeignKey("DeudorSalarioId")
                        .IsRequired()
                        .HasConstraintName("FK_SALARIO_DETALLE_idDeudorSalario");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BendHistBusqSalariosDetalles")
                        .HasForeignKey("TipoDocumentoId")
                        .HasConstraintName("FK_SALARIO_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("DeudorSalario");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.BendHistBusqVehiculosDetalle", b =>
                {
                    b.HasOne("Domain.BendDeudorVehiculo", "DeudorVehiculo")
                        .WithMany("BendHistBusqVehiculosDetalles")
                        .HasForeignKey("DeudorVehiculoId")
                        .IsRequired()
                        .HasConstraintName("FK_VEHICULO_BUSQVEHICULO_idDeudorVehiculo");

                    b.HasOne("Domain.BendGarantiaFavore", "GarantiaFavor")
                        .WithMany("BendHistBusqVehiculosDetalles")
                        .HasForeignKey("GarantiaFavorId")
                        .HasConstraintName("FK_BUSQ_VEHICULOS_GARANTIA_idGarantiaFavor");

                    b.HasOne("Domain.BendLimitacionPropiedade", "LimitacionPropiedad")
                        .WithMany("BendHistBusqVehiculosDetalles")
                        .HasForeignKey("LimitacionPropiedadId")
                        .HasConstraintName("FK_BUSQ_VEHICULOS_LIMITACION_idLimitacionPropiedad");

                    b.Navigation("DeudorVehiculo");

                    b.Navigation("GarantiaFavor");

                    b.Navigation("LimitacionPropiedad");
                });

            modelBuilder.Entity("Domain.BendHistRamaJudicial", b =>
                {
                    b.HasOne("Domain.BendDeudorRamaJudicial", "DeudorRamaJudicial")
                        .WithMany("BendHistRamaJudicials")
                        .HasForeignKey("DeudorRamaJudicialId")
                        .HasConstraintName("FK__RAMAJUDICIAL_HISTRAMAJUDICIAL_idDeudorRamaJudicial");

                    b.HasOne("Domain.ApliJuzgado", "Juzgado")
                        .WithMany("BendHistRamaJudicials")
                        .HasForeignKey("JuzgadoId")
                        .HasConstraintName("FK__JUZAGADO_HISTRAMAJUDICIAL_idJuzgado");

                    b.HasOne("Domain.AsicSede", "Sede")
                        .WithMany("BendHistRamaJudicials")
                        .HasForeignKey("SedeId")
                        .HasConstraintName("FK__SEDE_HISTRAMAJUDICIAL_idSede");

                    b.Navigation("DeudorRamaJudicial");

                    b.Navigation("Juzgado");

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("Domain.BendHistValidacione", b =>
                {
                    b.HasOne("Domain.ApliLocacione", "Locacion")
                        .WithMany("BendHistValidaciones")
                        .HasForeignKey("LocacionId")
                        .IsRequired()
                        .HasConstraintName("FK_HISVALIDACION_LOCACIONES_idLocacion");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("BendHistValidaciones")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_HISVALIDACION_USUARIOS_idUsuario");

                    b.HasOne("Domain.BendValidacione", "Validacion")
                        .WithMany("BendHistValidaciones")
                        .HasForeignKey("ValidacionId")
                        .IsRequired()
                        .HasConstraintName("FK_HISVALIDACION_VALIDACIONES_idValidacion");

                    b.Navigation("Locacion");

                    b.Navigation("Usuario");

                    b.Navigation("Validacion");
                });

            modelBuilder.Entity("Domain.BendObjeto", b =>
                {
                    b.HasOne("Domain.GibdTipoAmbiente", "TipoAmbiente")
                        .WithMany("BendObjetos")
                        .HasForeignKey("TipoAmbienteId")
                        .IsRequired()
                        .HasConstraintName("FK_OBJETO_AMBIENTE_idTipoAmbiente");

                    b.HasOne("Domain.BendTipoObjeto", "TipoObjeto")
                        .WithMany("BendObjetos")
                        .HasForeignKey("TipoObjetoId")
                        .IsRequired()
                        .HasConstraintName("FK_OBJETO_TIPO_OBJETOS_idTipoObjeto");

                    b.Navigation("TipoAmbiente");

                    b.Navigation("TipoObjeto");
                });

            modelBuilder.Entity("Domain.BendRespuestaSesione", b =>
                {
                    b.HasOne("Domain.BendPreguntaSesione", "Pregunta")
                        .WithMany("BendRespuestaSesiones")
                        .HasForeignKey("PreguntaId")
                        .IsRequired()
                        .HasConstraintName("FK_RESPUESTA_PREGUNTA_idPregunta");

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("Domain.BendUsuario", b =>
                {
                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithOne("BendUsuario")
                        .HasForeignKey("Domain.BendUsuario", "UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_BENDUSUARIO_BOFFUSUARIO_idUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.BoffApoderado", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BoffApoderados")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_APODERADOS_CLIENTE_idCliente");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BoffApoderados")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_APODERADOS_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("Cliente");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.BoffAsociacionColorCliente", b =>
                {
                    b.HasOne("Domain.BoffColore", "Color")
                        .WithMany("BoffAsociacionColorClientes")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_ASOC_COLOR_idColor");

                    b.HasOne("Domain.BendCustomizaElemento", "CustomizaElemento")
                        .WithMany("BoffAsociacionColorClientes")
                        .HasForeignKey("CustomizaElementoId")
                        .IsRequired()
                        .HasConstraintName("FK_ASOC_CUSTOM_idCustomizaElemento");

                    b.Navigation("Color");

                    b.Navigation("CustomizaElemento");
                });

            modelBuilder.Entity("Domain.BoffCliente", b =>
                {
                    b.HasOne("Domain.ApliLocacione", "Locacion")
                        .WithMany("BoffClientes")
                        .HasForeignKey("LocacionId")
                        .IsRequired()
                        .HasConstraintName("FK_CLIENTES_LOCACION_idLocacion");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BoffClientes")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_CLIENTES_TIPODOCUMENTO_idTipoDocumento");

                    b.HasOne("Domain.ApliTipoPersona", "TipoPersona")
                        .WithMany("BoffClientes")
                        .HasForeignKey("TipoPersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_CLIENTES_TIPOPERSONA_idTipoPersona");

                    b.Navigation("Locacion");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.BoffColore", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BoffColores")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_COLOR_CLIENTE_idCliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.BoffConfigCliente", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BoffConfigClientes")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_CONFIGCLIENTES_CLIENTES_idCliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.BoffCuenta", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BoffCuenta")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_CUENTA_CLIENTE_idCliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.BoffCuentasAgente", b =>
                {
                    b.HasOne("Domain.BoffCuenta", "Cuenta")
                        .WithMany("BoffCuentasAgentes")
                        .HasForeignKey("CuentaId")
                        .IsRequired()
                        .HasConstraintName("FK_AGENTE_CUENTA_idCuenta");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BoffCuentasAgentes")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_AGENTE_TIPO_DOCUMENTO_idTipoDocumento");

                    b.Navigation("Cuenta");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.BoffEstadoProcesalDocumento", b =>
                {
                    b.HasOne("Domain.ApliEstatusProceso", "EstatusProceso")
                        .WithMany("BoffEstadoProcesalDocumentos")
                        .HasForeignKey("EstatusProcesoId")
                        .IsRequired()
                        .HasConstraintName("FK_PROCESAL_DOCUMENTOS_ESTATUS_idEstatusProceso");

                    b.HasOne("Domain.BendTipoExpDocumento", "TipoExpDocumento")
                        .WithMany("BoffEstadoProcesalDocumentos")
                        .HasForeignKey("TipoExpDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_PROCESAL_DOCUMENTOS_TIPOEXPDOCUMENTOS_idTipoExpDocumento");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("BoffEstadoProcesalDocumentos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_PROCESAL_DOCUMENTOS_USUARIO_idUsuario");

                    b.Navigation("EstatusProceso");

                    b.Navigation("TipoExpDocumento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.BoffHistContrasena", b =>
                {
                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("BoffHistContrasenas")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_HISCONTRASENA_USUARIOS_idUsuario");

                    b.HasOne("Domain.BendValidacione", "Validacion")
                        .WithMany("BoffHistContrasenas")
                        .HasForeignKey("ValidacionId")
                        .IsRequired()
                        .HasConstraintName("FK_HISCONTRASENA_VALIDACIONES_idValidacion");

                    b.Navigation("Usuario");

                    b.Navigation("Validacion");
                });

            modelBuilder.Entity("Domain.BoffPerfilRole", b =>
                {
                    b.HasOne("Domain.BoffPerfile", "Perfil")
                        .WithMany("BoffPerfilRoles")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("FK_PERFIL_ROLES_idPerfil");

                    b.HasOne("Domain.BoffRole", "Rol")
                        .WithMany("BoffPerfilRoles")
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("FK_PERFIL_ROLES_idRol");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("BoffPerfilRoles")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_PERFIL_ROLES_idUsuario");

                    b.Navigation("Perfil");

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.BoffPerfilesPermiso", b =>
                {
                    b.HasOne("Domain.BendObjeto", "Objeto")
                        .WithMany("BoffPerfilesPermisos")
                        .HasForeignKey("ObjetoId")
                        .IsRequired()
                        .HasConstraintName("FK_PERFILPERMISOS_OBJETOS_idObjeto");

                    b.HasOne("Domain.BoffPerfile", "Perfil")
                        .WithMany("BoffPerfilesPermisos")
                        .HasForeignKey("PerfilId")
                        .IsRequired()
                        .HasConstraintName("FK_PERFILPERMISOS_PERFILES_idPerfil");

                    b.HasOne("Domain.BoffPermiso", "Permiso")
                        .WithMany("BoffPerfilesPermisos")
                        .HasForeignKey("PermisoId")
                        .IsRequired()
                        .HasConstraintName("FK_PERFILPERMISOS_PERMISOS_idPermiso");

                    b.Navigation("Objeto");

                    b.Navigation("Perfil");

                    b.Navigation("Permiso");
                });

            modelBuilder.Entity("Domain.BoffRepresentante", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BoffRepresentantes")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_REPRESENTANTES_CLIENTE_idCliente");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BoffRepresentantes")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_REPRESENTANTES_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("Cliente");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.BoffSesionesActiva", b =>
                {
                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_SESIONACTIVA_USUARIOS_idUsuario");

                    b.HasOne("Domain.BendValidacione", "Validacion")
                        .WithMany()
                        .HasForeignKey("ValidacionId")
                        .IsRequired()
                        .HasConstraintName("FK_SESIONACTIVA_VALIDACION_idValidacion");

                    b.Navigation("Usuario");

                    b.Navigation("Validacion");
                });

            modelBuilder.Entity("Domain.BoffSesionesErronea", b =>
                {
                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_SESIONERRONEA_USUARIOS_idUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.BoffSesionesObjeto", b =>
                {
                    b.HasOne("Domain.BendObjeto", "Objeto")
                        .WithMany("BoffSesionesObjetos")
                        .HasForeignKey("ObjetoId")
                        .IsRequired()
                        .HasConstraintName("FK_SESIONOBJETO_OBJETO_idObjeto");

                    b.Navigation("Objeto");
                });

            modelBuilder.Entity("Domain.BoffTipoSubetapaMedidaCautelar", b =>
                {
                    b.HasOne("Domain.BoffTipoEtapaMedidaCautelar", "TipoEtapaMedidaCautelar")
                        .WithMany("BoffTipoSubetapaMedidaCautelars")
                        .HasForeignKey("TipoEtapaMedidaCautelarId")
                        .IsRequired()
                        .HasConstraintName("FK_SUBETAPA_MEDIDACAUTELAR_ETAPAMEDIDACAUTELAR_idTipoEtapaMedidaCautelar");

                    b.Navigation("TipoEtapaMedidaCautelar");
                });

            modelBuilder.Entity("Domain.BoffUsuario", b =>
                {
                    b.HasOne("Domain.BoffCliente", "Cliente")
                        .WithMany("BoffUsuarios")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_BOFFUSUARIO_CLIENTES_idCliente");

                    b.HasOne("Domain.BendRespuestaSesione", "Respuesta")
                        .WithMany("BoffUsuarios")
                        .HasForeignKey("RespuestaId")
                        .IsRequired()
                        .HasConstraintName("FK_BOFFUSUARIO_RESPUESTAS_idRespuesta");

                    b.HasOne("Domain.BoffRole", "Rol")
                        .WithMany("BoffUsuarios")
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("FK_BOFFUSUARIO_ROLES_idRol");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("BoffUsuarios")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_BOFFUSUARIO_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("Cliente");

                    b.Navigation("Respuesta");

                    b.Navigation("Rol");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.BoffUsuarioCuenta", b =>
                {
                    b.HasOne("Domain.BoffCuenta", "Cuenta")
                        .WithMany("BoffUsuarioCuenta")
                        .HasForeignKey("CuentaId")
                        .IsRequired()
                        .HasConstraintName("FK_USUARIO_CUENTAS_CUENTAS_idCuenta");

                    b.HasOne("Domain.BoffUsuario", "Usuario")
                        .WithMany("BoffUsuarioCuenta")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_USUARIO_CUENTAS_USUARIOS_idUsuario");

                    b.Navigation("Cuenta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.GbotBot", b =>
                {
                    b.HasOne("Domain.GbotProcesosBot", "ProcesoBot")
                        .WithMany("GbotBots")
                        .HasForeignKey("ProcesoBotId")
                        .IsRequired()
                        .HasConstraintName("FK_BOTS_PROCESOSBOTS_idProcesoBot");

                    b.HasOne("Domain.GibdTipoAmbiente", "TipoAmbiente")
                        .WithMany("GbotBots")
                        .HasForeignKey("TipoAmbienteId")
                        .IsRequired()
                        .HasConstraintName("FK_BOTS_TIPOAMBIENTES_idTipoAmbiente");

                    b.Navigation("ProcesoBot");

                    b.Navigation("TipoAmbiente");
                });

            modelBuilder.Entity("Domain.GbotHistGestionBot", b =>
                {
                    b.HasOne("Domain.GbotBot", "Bot")
                        .WithMany("GbotHistGestionBots")
                        .HasForeignKey("BotId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTGESTBOTS_BOTS_idBot");

                    b.HasOne("Domain.BendObjeto", "Objeto")
                        .WithMany("GbotHistGestionBots")
                        .HasForeignKey("ObjetoId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTGESTBOTS_OBJETOS_idObjeto");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("GbotHistGestionBots")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTGESTBOTS_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("Bot");

                    b.Navigation("Objeto");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.GbotHistLogBot", b =>
                {
                    b.HasOne("Domain.GbotBot", "Bot")
                        .WithMany("GbotHistLogBots")
                        .HasForeignKey("BotId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTLOGBOTS_BOTS_idBot");

                    b.HasOne("Domain.GbotLogCategoria", "LogCategoria")
                        .WithMany("GbotHistLogBots")
                        .HasForeignKey("LogCategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTLOGBOTS_LOGCATEGORIAS_idLogCategoria");

                    b.HasOne("Domain.GbotLogEvento", "LogEvento")
                        .WithMany("GbotHistLogBots")
                        .HasForeignKey("LogEventoId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTLOGBOTS_LOGEVENTOS_idLogEvento");

                    b.HasOne("Domain.GbotLogInteraccione", "LogInteraccion")
                        .WithMany("GbotHistLogBots")
                        .HasForeignKey("LogInteraccionId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTLOGBOTS_LOGINTERACCIONES_idLogInteraccion");

                    b.HasOne("Domain.ApliTipoDocumento", "TipoDocumento")
                        .WithMany("GbotHistLogBots")
                        .HasForeignKey("TipoDocumentoId")
                        .IsRequired()
                        .HasConstraintName("FK_HISTLOGBOTS_TIPODOCUMENTO_idTipoDocumento");

                    b.Navigation("Bot");

                    b.Navigation("LogCategoria");

                    b.Navigation("LogEvento");

                    b.Navigation("LogInteraccion");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.GibdAuditoriaTabla", b =>
                {
                    b.HasOne("Domain.GibdTabla", "Tabla")
                        .WithMany("GibdAuditoriaTablas")
                        .HasForeignKey("TablaId")
                        .IsRequired()
                        .HasConstraintName("FK_AUDITORIATABLA_TABLAS_idTabla");

                    b.Navigation("Tabla");
                });

            modelBuilder.Entity("Domain.GibdTabla", b =>
                {
                    b.HasOne("Domain.GibdProcesosTabla", "Proceso")
                        .WithMany("GibdTablas")
                        .HasForeignKey("ProcesoId")
                        .IsRequired()
                        .HasConstraintName("FK_TABLAS_PROCESO_idProceso");

                    b.HasOne("Domain.GibdTipoAmbiente", "TipoAmbiente")
                        .WithMany("GibdTablas")
                        .HasForeignKey("TipoAmbienteId")
                        .IsRequired()
                        .HasConstraintName("FK_TABLAS_AMBIENTE_idTipoAmbiente");

                    b.Navigation("Proceso");

                    b.Navigation("TipoAmbiente");
                });

            modelBuilder.Entity("Domain.ApliAbogado", b =>
                {
                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliDemandado", b =>
                {
                    b.Navigation("ApliMedidaCautelarExpedientes");

                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliDemandante", b =>
                {
                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliEstadoProcesal", b =>
                {
                    b.Navigation("ApliEstatusProcesos");

                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliEstatusProceso", b =>
                {
                    b.Navigation("BoffEstadoProcesalDocumentos");
                });

            modelBuilder.Entity("Domain.ApliEvento", b =>
                {
                    b.Navigation("ApliDetalleExpedienteEventos");
                });

            modelBuilder.Entity("Domain.ApliJuzgado", b =>
                {
                    b.Navigation("ApliJuzgadoExpedientes");

                    b.Navigation("BendEstadoElectronicosRjs");

                    b.Navigation("BendHistRamaJudicials");
                });

            modelBuilder.Entity("Domain.ApliLocacionJuzgado", b =>
                {
                    b.Navigation("ApliJuzgados");
                });

            modelBuilder.Entity("Domain.ApliLocacione", b =>
                {
                    b.Navigation("BendHistValidaciones");

                    b.Navigation("BoffClientes");
                });

            modelBuilder.Entity("Domain.ApliPagare", b =>
                {
                    b.Navigation("ApliPagaresExpedientes");
                });

            modelBuilder.Entity("Domain.ApliSubetapa", b =>
                {
                    b.Navigation("ApliActuacionesExpedientes");

                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliSubtipoJuzgado", b =>
                {
                    b.Navigation("ApliLocacionJuzgados");
                });

            modelBuilder.Entity("Domain.ApliTipoAsignacione", b =>
                {
                    b.Navigation("ApliAsignaciones");
                });

            modelBuilder.Entity("Domain.ApliTipoCuantia", b =>
                {
                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliTipoDocumento", b =>
                {
                    b.Navigation("ApliDemandados");

                    b.Navigation("ApliDemandantes");

                    b.Navigation("BendDeudores");

                    b.Navigation("BendHistBusqSalariosDetalles");

                    b.Navigation("BoffApoderados");

                    b.Navigation("BoffClientes");

                    b.Navigation("BoffCuentasAgentes");

                    b.Navigation("BoffRepresentantes");

                    b.Navigation("BoffUsuarios");

                    b.Navigation("GbotHistGestionBots");

                    b.Navigation("GbotHistLogBots");
                });

            modelBuilder.Entity("Domain.ApliTipoEtapa", b =>
                {
                    b.Navigation("ApliEstadoProcesals");

                    b.Navigation("ApliSubetapas");
                });

            modelBuilder.Entity("Domain.ApliTipoEvento", b =>
                {
                    b.Navigation("ApliEventos");
                });

            modelBuilder.Entity("Domain.ApliTipoJuzgado", b =>
                {
                    b.Navigation("ApliSubtipoJuzgados");
                });

            modelBuilder.Entity("Domain.ApliTipoPagare", b =>
                {
                    b.Navigation("ApliPagares");
                });

            modelBuilder.Entity("Domain.ApliTipoPersona", b =>
                {
                    b.Navigation("ApliDemandantes");

                    b.Navigation("ApliTipoDocumentos");

                    b.Navigation("BoffClientes");
                });

            modelBuilder.Entity("Domain.ApliTipoProceso", b =>
                {
                    b.Navigation("ApliTipoEtapas");

                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.ApliVencimientoContrasenia", b =>
                {
                    b.Navigation("ApliVencimientoContraseniasClientes");
                });

            modelBuilder.Entity("Domain.AsicExpediente", b =>
                {
                    b.Navigation("ApliActuacionesExpedientes");

                    b.Navigation("ApliAsignaciones");

                    b.Navigation("ApliDetalleExpedienteEventos");

                    b.Navigation("ApliEstatusProcesos");

                    b.Navigation("ApliExpDocumentos");

                    b.Navigation("ApliJuzgadoExpedientes");

                    b.Navigation("ApliMedidaCautelarExpedientes");

                    b.Navigation("ApliPagaresExpedientes");

                    b.Navigation("AsicExpedienteCargaErrores");

                    b.Navigation("BendDeudorDecevals");
                });

            modelBuilder.Entity("Domain.AsicMasivaCabecera", b =>
                {
                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.AsicMasivaLote", b =>
                {
                    b.Navigation("AsicMasivaCabeceras");

                    b.Navigation("AsicMasivaLoteCargaErrores");
                });

            modelBuilder.Entity("Domain.AsicSede", b =>
                {
                    b.Navigation("ApliLocaciones");

                    b.Navigation("AsicExpedientes");

                    b.Navigation("BendDecevals");

                    b.Navigation("BendHistRamaJudicials");
                });

            modelBuilder.Entity("Domain.BendCustomizaElemento", b =>
                {
                    b.Navigation("BoffAsociacionColorClientes");
                });

            modelBuilder.Entity("Domain.BendDeudorBien", b =>
                {
                    b.Navigation("BendHistBusqBienesDetalles");
                });

            modelBuilder.Entity("Domain.BendDeudorDeceval", b =>
                {
                    b.Navigation("BendDecevals");
                });

            modelBuilder.Entity("Domain.BendDeudorRamaJudicial", b =>
                {
                    b.Navigation("BendHistRamaJudicials");
                });

            modelBuilder.Entity("Domain.BendDeudorSalario", b =>
                {
                    b.Navigation("BendHistBusqSalariosDetalles");
                });

            modelBuilder.Entity("Domain.BendDeudorVehiculo", b =>
                {
                    b.Navigation("BendHistBusqVehiculosDetalles");
                });

            modelBuilder.Entity("Domain.BendDeudore", b =>
                {
                    b.Navigation("BendDeudorBiens");

                    b.Navigation("BendDeudorDecevals");

                    b.Navigation("BendDeudorRamaJudicials");

                    b.Navigation("BendDeudorSalarios");

                    b.Navigation("BendDeudorVehiculos");
                });

            modelBuilder.Entity("Domain.BendGarantiaFavore", b =>
                {
                    b.Navigation("BendHistBusqVehiculosDetalles");
                });

            modelBuilder.Entity("Domain.BendLimitacionPropiedade", b =>
                {
                    b.Navigation("BendHistBusqVehiculosDetalles");
                });

            modelBuilder.Entity("Domain.BendObjeto", b =>
                {
                    b.Navigation("BoffPerfilesPermisos");

                    b.Navigation("BoffSesionesObjetos");

                    b.Navigation("GbotHistGestionBots");
                });

            modelBuilder.Entity("Domain.BendPlantillaCampo", b =>
                {
                    b.Navigation("BendCampoClientes");
                });

            modelBuilder.Entity("Domain.BendPreguntaSesione", b =>
                {
                    b.Navigation("BendRespuestaSesiones");
                });

            modelBuilder.Entity("Domain.BendRespuestaSesione", b =>
                {
                    b.Navigation("BoffUsuarios");
                });

            modelBuilder.Entity("Domain.BendTipoExpDocumento", b =>
                {
                    b.Navigation("ApliExpDocumentos");

                    b.Navigation("BoffEstadoProcesalDocumentos");
                });

            modelBuilder.Entity("Domain.BendTipoObjeto", b =>
                {
                    b.Navigation("BendObjetos");
                });

            modelBuilder.Entity("Domain.BendValidacione", b =>
                {
                    b.Navigation("BendHistValidaciones");

                    b.Navigation("BoffHistContrasenas");
                });

            modelBuilder.Entity("Domain.BoffApoderado", b =>
                {
                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.BoffCliente", b =>
                {
                    b.Navigation("ApliDirectorios");

                    b.Navigation("ApliVencimientoContraseniasClientes");

                    b.Navigation("AsicExpedientes");

                    b.Navigation("AsicMasivaLotes");

                    b.Navigation("BendCampoClientes");

                    b.Navigation("BoffApoderados");

                    b.Navigation("BoffColores");

                    b.Navigation("BoffConfigClientes");

                    b.Navigation("BoffCuenta");

                    b.Navigation("BoffRepresentantes");

                    b.Navigation("BoffUsuarios");
                });

            modelBuilder.Entity("Domain.BoffColore", b =>
                {
                    b.Navigation("BoffAsociacionColorClientes");
                });

            modelBuilder.Entity("Domain.BoffCuenta", b =>
                {
                    b.Navigation("AsicExpedientes");

                    b.Navigation("BendDecevals");

                    b.Navigation("BoffCuentasAgentes");

                    b.Navigation("BoffUsuarioCuenta");
                });

            modelBuilder.Entity("Domain.BoffPerfile", b =>
                {
                    b.Navigation("BoffPerfilRoles");

                    b.Navigation("BoffPerfilesPermisos");
                });

            modelBuilder.Entity("Domain.BoffPermiso", b =>
                {
                    b.Navigation("BoffPerfilesPermisos");
                });

            modelBuilder.Entity("Domain.BoffRepresentante", b =>
                {
                    b.Navigation("AsicExpedientes");
                });

            modelBuilder.Entity("Domain.BoffRole", b =>
                {
                    b.Navigation("BoffPerfilRoles");

                    b.Navigation("BoffUsuarios");
                });

            modelBuilder.Entity("Domain.BoffTipoEtapaMedidaCautelar", b =>
                {
                    b.Navigation("BoffTipoSubetapaMedidaCautelars");
                });

            modelBuilder.Entity("Domain.BoffTipoMedidasCautelare", b =>
                {
                    b.Navigation("ApliMedidaCautelarExpedientes");
                });

            modelBuilder.Entity("Domain.BoffTipoSubetapaMedidaCautelar", b =>
                {
                    b.Navigation("ApliMedidaCautelarExpedientes");
                });

            modelBuilder.Entity("Domain.BoffUsuario", b =>
                {
                    b.Navigation("ApliAbogados");

                    b.Navigation("ApliAsignaciones");

                    b.Navigation("ApliDetalleExpedienteEventos");

                    b.Navigation("ApliEstatusProcesos");

                    b.Navigation("BendHistValidaciones");

                    b.Navigation("BendUsuario");

                    b.Navigation("BoffEstadoProcesalDocumentos");

                    b.Navigation("BoffHistContrasenas");

                    b.Navigation("BoffPerfilRoles");

                    b.Navigation("BoffUsuarioCuenta");
                });

            modelBuilder.Entity("Domain.GbotBot", b =>
                {
                    b.Navigation("GbotHistGestionBots");

                    b.Navigation("GbotHistLogBots");
                });

            modelBuilder.Entity("Domain.GbotLogCategoria", b =>
                {
                    b.Navigation("GbotHistLogBots");
                });

            modelBuilder.Entity("Domain.GbotLogEvento", b =>
                {
                    b.Navigation("GbotHistLogBots");
                });

            modelBuilder.Entity("Domain.GbotLogInteraccione", b =>
                {
                    b.Navigation("GbotHistLogBots");
                });

            modelBuilder.Entity("Domain.GbotProcesosBot", b =>
                {
                    b.Navigation("GbotBots");
                });

            modelBuilder.Entity("Domain.GibdProcesosTabla", b =>
                {
                    b.Navigation("GibdTablas");
                });

            modelBuilder.Entity("Domain.GibdTabla", b =>
                {
                    b.Navigation("GibdAuditoriaTablas");
                });

            modelBuilder.Entity("Domain.GibdTipoAmbiente", b =>
                {
                    b.Navigation("BendObjetos");

                    b.Navigation("GbotBots");

                    b.Navigation("GibdTablas");
                });
#pragma warning restore 612, 618
        }
    }
}
